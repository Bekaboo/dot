# tell Tmux that outside terminal supports true color
set -g default-terminal 'tmux-256color'
set -ga terminal-overrides ',*:Tc'

# undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

set -g mouse on
set -g allow-passthrough on
set -g set-clipboard external

set -g display-time 2000
set -g history-limit 200000
set -g renumber-windows on

# prevent lagging <esc> in vim
set -s escape-time 0

# start windows and panes at 1
set -g base-index 1
setw -g pane-base-index 1

# set prefix to C-Space
set -g prefix C-Space
bind C-Space send-prefix
unbind C-b

# set color for status bar
set -g status-style                 fg=white,bg=default
set -g window-status-activity-style fg=default
set -g window-status-bell-style     fg=default
set -g window-status-current-style  fg=white,bold
set -g mode-style                   reverse

# set color for pane border
set -g pane-border-style fg=blue
set -g pane-active-border-style fg=magenta

set -g bell-action none
set -g focus-events on
set -g monitor-activity on
set -g visual-activity off
set -g visual-activity off
set -g -q mouse on
set -g status-interval 1
set -g automatic-rename on
set -g automatic-rename-format '#{?#{==:#{pane_current_path},#{HOME}},~,#{b:pane_current_path}}/'

# conceal status bar if only one window is opened
set -g status off
set -g status-position top
set -g status-justify "absolute-centre"
set -g status-left-length 40
set -g status-right-length 40
set -g status-right "[#S]"
set -g status-left ""
set-hook -g window-linked          "if -F '#{==:#{session_windows},1}' 'set status off' 'set status on'"
set-hook -g window-unlinked        "if -F '#{==:#{session_windows},1}' 'set status off' 'set status on'"
set-hook -g client-session-changed "if -F '#{==:#{session_windows},1}' 'set status off' 'set status on'"

# move panes
bind S command-prompt -p 'send pane to:'   "join-pane -v -t '%%'"
bind J command-prompt -p 'join pane from:' "join-pane -v -s '%%'"

is_shell="ps h -o comm -t '#{pane_tty}' | \
    tail -n1 | \
    grep -iqE '^((ba|da|fi|z)?sh)$'"

wisely_confirm_before_close="if -F '#{<=:#{window_panes},1}' \
    \"confirm kill-pane\" \
    \"if \\\"$is_shell\\\" \
    'kill-pane' \
    'confirm kill-pane'\""

# vim style key bindings
bind n   split-window -v -c '#{pane_current_path}'
bind s   split-window -v -c '#{pane_current_path}'
bind v   split-window -h -c '#{pane_current_path}'
bind C-s split-window -v -c '#{pane_current_path}'
bind C-v split-window -h -c '#{pane_current_path}'
bind C-n new-window      -c '#{pane_current_path}'
bind C-o confirm 'kill-pane -a'
bind o confirm 'kill-pane -a'
bind O resize-pane -Z
bind c "$wisely_confirm_before_close"
bind N new-window -c "#{pane_current_path}"
bind BTab previous-window
bind Tab next-window
bind r swap-pane -D
bind R swap-pane -U
bind = select-layout tiled
bind C-r choose-buffer -Z

# use the vim motion keys to move between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# use the vim motion keys to resize panes
bind -r C-h resize-pane -L 2
bind -r C-j resize-pane -D 2
bind -r C-k resize-pane -U 2
bind -r C-l resize-pane -R 2

# use M-0 to M-9 to select windows, create new window if it doesn't exist
bind -n M-0 if 'tmux select-window -t :0' '' "new-window -t :0 -c '#{pane_current_path}'"
bind -n M-1 if 'tmux select-window -t :1' '' "new-window -t :1 -c '#{pane_current_path}'"
bind -n M-2 if 'tmux select-window -t :2' '' "new-window -t :2 -c '#{pane_current_path}'"
bind -n M-3 if 'tmux select-window -t :3' '' "new-window -t :3 -c '#{pane_current_path}'"
bind -n M-4 if 'tmux select-window -t :4' '' "new-window -t :4 -c '#{pane_current_path}'"
bind -n M-5 if 'tmux select-window -t :5' '' "new-window -t :5 -c '#{pane_current_path}'"
bind -n M-6 if 'tmux select-window -t :6' '' "new-window -t :6 -c '#{pane_current_path}'"
bind -n M-7 if 'tmux select-window -t :7' '' "new-window -t :7 -c '#{pane_current_path}'"
bind -n M-8 if 'tmux select-window -t :8' '' "new-window -t :8 -c '#{pane_current_path}'"
bind -n M-9 if 'tmux select-window -t :9' '' "new-window -t :9 -c '#{pane_current_path}'"

bind 0 if 'tmux select-window -t :0' '' "new-window -t :0 -c '#{pane_current_path}'"
bind 1 if 'tmux select-window -t :1' '' "new-window -t :1 -c '#{pane_current_path}'"
bind 2 if 'tmux select-window -t :2' '' "new-window -t :2 -c '#{pane_current_path}'"
bind 3 if 'tmux select-window -t :3' '' "new-window -t :3 -c '#{pane_current_path}'"
bind 4 if 'tmux select-window -t :4' '' "new-window -t :4 -c '#{pane_current_path}'"
bind 5 if 'tmux select-window -t :5' '' "new-window -t :5 -c '#{pane_current_path}'"
bind 6 if 'tmux select-window -t :6' '' "new-window -t :6 -c '#{pane_current_path}'"
bind 7 if 'tmux select-window -t :7' '' "new-window -t :7 -c '#{pane_current_path}'"
bind 8 if 'tmux select-window -t :8' '' "new-window -t :8 -c '#{pane_current_path}'"
bind 9 if 'tmux select-window -t :9' '' "new-window -t :9 -c '#{pane_current_path}'"

# integration with vim/nvim (navigation)
# @is_vim is set from vim/nvim
# Source: https://github.com/christoomey/vim-tmux-navigator/issues/295#issuecomment-1123455337
bind -n M-h if -F '#{@is_vim}' 'send-keys M-h' { if -F '#{pane_at_left}'   '' 'select-pane -L' }
bind -n M-j if -F '#{@is_vim}' 'send-keys M-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind -n M-k if -F '#{@is_vim}' 'send-keys M-k' { if -F '#{pane_at_top}'    '' 'select-pane -U' }
bind -n M-l if -F '#{@is_vim}' 'send-keys M-l' { if -F '#{pane_at_right}'  '' 'select-pane -R' }
bind -T copy-mode-vi M-h if -F '#{pane_at_left}'   '' 'select-pane -L'
bind -T copy-mode-vi M-j if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi M-k if -F '#{pane_at_top}'    '' 'select-pane -U'
bind -T copy-mode-vi M-l if -F '#{pane_at_right}'  '' 'select-pane -R'

bind -n M-t if -F '#{@is_vim}' 'send-keys M-t' 'select-pane -t 1'
bind -n M-w if -F '#{@is_vim}' 'send-keys M-w' 'select-pane -t :.+'
bind -n M-W if -F '#{@is_vim}' 'send-keys M-w' 'select-pane -t :.-'
bind -n M-n if -F '#{@is_vim}' 'send-keys M-n' 'split-window -v -c "#{pane_current_path}"'
bind -n M-s if -F '#{@is_vim}' 'send-keys M-s' 'split-window -v -c "#{pane_current_path}"'
bind -n M-v if -F '#{@is_vim}' 'send-keys M-v' 'split-window -h -c "#{pane_current_path}"'
bind -n M-c if -F '#{@is_vim}' 'send-keys M-c' "$wisely_confirm_before_close"
bind -n M-o if -F '#{@is_vim}' 'send-keys M-o' "confirm 'kill-pane -a'"
bind -n M-r if -F '#{@is_vim}' 'send-keys M-r' 'swap-pane -D'
bind -n M-R if -F '#{@is_vim}' 'send-keys M-R' 'swap-pane -U'
bind -n M-= if -F '#{@is_vim}' 'send-keys M-=' 'select-layout tiled'
bind -n M-p if -F '#{@is_vim}' 'send-keys M-p' 'last-pane'
bind -T copy-mode-vi M-t select-pane -t 1
bind -T copy-mode-vi M-w select-pane -t :.+
bind -T copy-mode-vi M-W select-pane -t :.-
bind -T copy-mode-vi M-n split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-s split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-v split-window -h -c '#{pane_current_path}'
bind -T copy-mode-vi M-c "$wisely_confirm_before_close"
bind -T copy-mode-vi M-o confirm 'kill-pane -a'
bind -T copy-mode-vi M-r swap-pane -D
bind -T copy-mode-vi M-R swap-pane -U
bind -T copy-mode-vi M-= select-layout tiled
bind -T copy-mode-vi M-p last-pane

bind -n M-< if -F '#{@is_vim}' 'send-keys M-<' 'resize-pane -L 4'
bind -n M-> if -F '#{@is_vim}' 'send-keys M->' 'resize-pane -R 4'
bind -n M-, if -F '#{@is_vim}' 'send-keys M-<' 'resize-pane -L 4'
bind -n M-. if -F '#{@is_vim}' 'send-keys M->' 'resize-pane -R 4'
bind -n M-- if -F '#{@is_vim}' 'send-keys M--' "run \"tmux resize-pane -y $(($(tmux display -p '#{pane_height}') - 2))\""
bind -n M-+ if -F '#{@is_vim}' 'send-keys M-+' "run \"tmux resize-pane -y $(($(tmux display -p '#{pane_height}') + 2))\""
bind -T copy-mode-vi M-< resize-pane -L 4
bind -T copy-mode-vi M-> resize-pane -R 4
bind -T copy-mode-vi M-, resize-pane -L 4
bind -T copy-mode-vi M-. resize-pane -R 4
bind -T copy-mode-vi M-- run "tmux resize-pane -y $(($(tmux display -p '#{pane_height}') - 2))"
bind -T copy-mode-vi M-+ run "tmux resize-pane -y $(($(tmux display -p '#{pane_height}') + 2))"

bind -n M-O resize-pane -Z
bind -n M-C confirm kill-window
bind -n M-N new-window      -c '#{pane_current_path}'
bind -n M-S split-window -v -c '#{pane_current_path}'
bind -n M-V split-window -h -c '#{pane_current_path}'
bind -T copy-mode-vi M-O resize-pane -Z
bind -T copy-mode-vi M-C  confirm kill-window
bind -T copy-mode-vi M-N  new-window      -c '#{pane_current_path}'
bind -T copy-mode-vi M-S  split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-V  split-window -h -c '#{pane_current_path}'

# Use a unified keymap C-space + [ to escape from vim terminal mode or enter
# tmux visual mode
bind [ if -F '#{@is_vim}' 'send-keys C-Space; send-keys [' 'copy-mode'

toggle_botpane="if -F '#{<=:#{window_panes},1}' \
    \"split-window -v -c '#{pane_current_path}' -l 40%\" \
    \"if -F '#{window_zoomed_flag}' \
        'resize-pane -Z \; last-pane' \
        'select-pane -t :.top-left \; resize-pane -Z' \""

toggle_sidepane="if -F '#{<=:#{window_panes},1}' \
    \"split-window -h -c '#{pane_current_path}' -l 40%\" \
    \"if -F '#{window_zoomed_flag}' \
        'resize-pane -Z \; last-pane' \
        'select-pane -t :.top-left \; resize-pane -Z' \""

# toggle fullscreen
bind -n S-F11 resize-pane -Z
bind -n F11 "$toggle_botpane"
bind -n M-F11 "$toggle_sidepane"
bind -T copy-mode-vi S-F11  resize-pane -Z
bind -T copy-mode-vi F11 "$toggle_botpane"
bind -T copy-mode-vi M-F11 "$toggle_sidepane"

# use Escape to enter copy mode if running a shell in foreground
# caveat: does not work with sudo <opts> <shell>
shall_esc="ps h -o comm -t '#{pane_tty}' | \
    tail -n1 | \
    grep -iqE '^((ba|da|fi|z)?sh|less|gawk|i?python3?|lua)$'"
bind -n Escape if -F '#{pane_in_mode}' 'send-key q' {
    if "$shall_esc" 'copy-mode' 'send-keys Escape'
}

# use vim motion keys while in copy mode
set -g mode-keys vi
set -g status-keys emacs

# copy-mode with vim keys
# search for url etc
bind \\ copy-mode \;    send -X search-backward '(https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]+|[^[:blank:]]*/[^[:blank:]]+|[^[:blank:]]+/[^[:blank:]]*|#?\<[[:xdigit:]]{6,}\>'
bind -T copy-mode-vi \\ send -X search-backward '(https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]+|[^[:blank:]]*/[^[:blank:]]+|[^[:blank:]]+/[^[:blank:]]*|#?\<[[:xdigit:]]{6,}\>'
# no regex syntax when doing incremental search :(
# https://github.com/tmux/tmux/issues/2205
bind /   copy-mode \;    command-prompt -i -I '#{pane_search_string}' -p '(search down)' 'send -X search-forward-incremental "%%%"'
bind ?   copy-mode \;    command-prompt -i -I '#{pane_search_string}' -p '(search up)'   'send -X search-backward-incremental "%%%"'
bind -T copy-mode-vi /   command-prompt -i -I '#{pane_search_string}' -p '(search down)' 'send -X search-forward-incremental "%%%"'
bind -T copy-mode-vi ?   command-prompt -i -I '#{pane_search_string}' -p '(search up)'   'send -X search-backward-incremental "%%%"'
bind -T copy-mode-vi v   send -X begin-selection
bind -T copy-mode-vi C-v send -X begin-selection \; send -X rectangle-toggle
bind -T copy-mode-vi y   send -X copy-pipe 'xclip -in -selection clipboard'
bind -T copy-mode-vi i   send -X cancel
bind -T copy-mode-vi a   send -X cancel
bind -T copy-mode-vi o   if -F '#{selection_present}' 'send -X other-end' 'send -X cancel'
bind -T copy-mode-vi u   send -X halfpage-up
bind -T copy-mode-vi d   send -X halfpage-down
bind p paste-buffer -p
bind P command-prompt -p 'save history to file:' -I '~/tmux.history' 'capture-pane -S - -E -; save-buffer %1 ; delete-buffer'

# replace current session with an existing session
bind X \
  confirm -p "attach another session and kill current session (#S)? (y/n)" \
  "if-shell \"(($(tmux display -p '#{session_many_attached}') > 0))\" \
    choose-session \
    \"run-shell \\\"tmux choose-session \
        \\\\\\\"switch-client -t '%%'; \
            kill-session -t '$(tmux display -p '#S')'\\\\\\\"\\\"\""

# Use popup menu to select a layout
bind Space display-menu -x C -y C \
    -T '#[align=centre]Switch Layout' \
    'Tiled'           t { select-layout tiled } \
    'Main Horizontal' h { select-layout main-horizontal } \
    'Main Vertical'   v { select-layout main-vertical } \
    'Even Horizontal' H { select-layout even-horizontal } \
    'Even Vertical'   V { select-layout even-vertical }

# vim:ft=tmux:ts=4:sts=4:sw=4:et:
