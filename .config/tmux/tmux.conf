# tell Tmux that outside terminal supports true color
set -gq default-terminal 'tmux-256color'
set -gqa terminal-overrides ',*:Tc'


# undercurl support
set -asq terminal-overrides ',*:Smulx=\E[4::%p1%dm'
set -asq terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# stop tmux from launching login shells every time when a new pane is created
set-hook -g session-created {
    set -gq default-command "$SHELL"
}

set -gq mouse on
set -gq set-clipboard external

# For some reason opening in nvim in a tmux pane over SSH sends strange
# sequence to another pane
# Disabling the `bind -n M-P` keymaps also solves the issue
if '[ ! "$SSH_TTY" ]' {
    set -gq allow-passthrough on
}

set      -gq display-time 600
set      -gq history-limit 200000
set      -gq renumber-windows on
set-hook -g  window-linked 'move-window -r'

# prevent lagging <esc> in vim
set -s escape-time 0

# start windows and panes at 1
set -gq base-index 1
setw -g pane-base-index 1

# Ref:
# https://www.freecodecamp.org/news/tmux-in-practice-local-and-nested-remote-tmux-sessions-4f7ba5db8795/
# https://github.com/tmux/tmux/issues/237
# http://stahlke.org/dan/tmux-nested/
# - C-Space as prefix
# - M-S-Down toggles off all keybindinds except for M-S-Up
#   (transfer control to inner session)
# - M-S-Up toggles keybindinds back (regain control)
set -gq prefix None
bind -n      C-Space  switchc -T prefix
bind         C-Space  send-prefix
bind -n      M-S-Down {
    set key-table none
    if -F '#{==:#{status},off}' {
        display 'Keybinding passthrough ON'
    }
}
bind -T none M-S-Up {
    set -u key-table
    if -F '#{==:#{status},off}' {
        display 'Keybinding passthrough OFF'
    }
}
# prevent sub-session from transferring control to sub-sub-session
# in which case it won't be able to regain control beaus the M-S-Up
# key will be captured by the main session
bind -T none M-S-Down display 'Already in passthrough mode'
bind -n      M-S-Up   display 'Already exited passthrough mode'

# set color for statusline
set -gq status-style                 fg=white
set -gq window-status-activity-style fg=default
set -gq window-status-bell-style     fg=black,bg=magenta
set -gq window-status-current-style  fg=black,bg=red
set -gq mode-style                   reverse

# set current window format in statusline
setw -g window-status-current-format ' #{?window_zoomed_flag,#[italics],}#{window_name} '
setw -g window-status-format ' #{?window_zoomed_flag,#[italics],}#{window_name} '

# set color for pane border
set -gq pane-border-style fg=brightblack
set -gq pane-active-border-style fg=white

set -gq bell-action none
set -gq focus-events on
set -gq monitor-activity on
set -gq visual-activity off
set -gq mouse on
set -gq status-interval 1
set -gq automatic-rename on
set -gq automatic-rename-format \
    '#{?#{==:#{pane_current_path},#{HOME}},~,#{b:pane_current_path}}'

set -gq status off
set -gq status-position top
set -gq status-left-length 64
set -gq status-right-length 64
set -gq status-left '#[fg=black,bg=yellow]#{?#{==:#{key-table},none}, PASSTHROUGH ,}'
set -gq status-right "#[fg=black,bg=blue] #S #[bg=default] #[fg=black,bg=green] #{user}@#[fg=black,bg=green]#h "
# tmux don't have 'absolute-centre' option value until v3.2
if "ver=\$(tmux -V | grep -oP '[[:digit:].]+');  \
        ver_major=\$(echo \$ver | cut -d . -f1); \
        ver_minor=\$(echo \$ver | cut -d . -f2); \
        [ \$ver_major -gt 3 ] ||                 \
        [ \$ver_major -eq 3 -a \$ver_minor -ge 2 ]" \
    { set -gq status-justify absolute-centre }

# conceal statusline only if one window is opened and current session is
# unnamed, i.e. with a digit name
set_status="if -F \
        '#{&&:#{==:#{session_windows},1},#{m/r:^[[:digit:]]*$,#{session_name}}}' \
    'set status off' \
    'set status on'"
set-hook -ga window-linked          "$set_status"
set-hook -g  window-unlinked        "$set_status"
set-hook -g  client-session-changed "$set_status"
set-hook -g  session-renamed        "$set_status"

# pane border format
set -gq pane-border-format " #P #T "

# use system clipboard
set -gq copy-command "sh -c \
    'if [ \$(echo \$XDG_SESSION_TYPE) = x11 ]; \
        then xclip -in -selection clipboard; else wl-copy; fi'"

# command aliases
set -s command-alias[10] show-pane-name='set -gq pane-border-status top'
set -s command-alias[11] hide-pane-name='set -gq pane-border-status off'
set -s command-alias[12] toggle-pane-name="if \
    '[ \"\$(tmux show -g pane-border-status)\" = \"pane-border-status off\" ]' \
    'show-pane-name' \
    'hide-pane-name'"
set -s command-alias[13] rename-pane='select-pane -T'
set -s command-alias[14] lock-pane="select-pane -d"
set -s command-alias[15] unlock-pane="select-pane -e"
set -s command-alias[16] reload-config="run \
    \"tmux display -p '#{config_files}' \
        | tr ',' '\\n' \
        | xargs -I % tmux source %\""
set -s command-alias[17] dump-history="run \
    'tmux command-prompt -p \"save history to file:\" \
            -I \"#{pane_current_path}/tmux-hist-\$(date +%Y-%m-%d-%H-%M-%S).txt\" \
        \"capture-pane -S - -E -; save-buffer %1; delete-buffer\"'"

# colored choose-tree
set -s command-alias[18] choose-tree="choose-tree -F '#{?pane_format,\
#[fg=green]#{pane_current_command} #[fg=white]#{pane_title},\
#{?window_format,\
#[fg=red]#{?window_zoomed_flag,#[italics],}#{window_name}#{?#{==:#{window_panes},1}, \
#{?#{!=:#{?window_zoomed_flag,#[italics],}#{window_name},#[fg=green]#{pane_current_command}},\
#[fg=green]#{pane_current_command} ,}\
#[fg=white]#{pane_title},},\
#{?session_grouped, (group #{session_group}: #{session_group_list}),}\
#{?session_attached,#[fg=blue](attached),#[fg=magenta](unattached)}}}'"

# rebind 'w' to the colored choose-tree command
bind w choose-tree -Zw
bind -n MouseDown1StatusRight if -F '#{pane_in_mode}' \
    { send-keys q } \
    { choose-tree -Zw }

# rename pane, not window
bind . command-prompt -p 'rename pane to:' 'rename-pane %%'
bind W toggle-pane-name

# move panes
bind S command-prompt -p 'send pane to:'   "join-pane -v -t '%%'"
bind J command-prompt -p 'join pane from:' "join-pane -v -s '%%'"

is_shell="ps h -o comm -t '#{pane_tty}' | \
    tail -n1 | \
    grep -iqE '^((ba|da|fi|z)?sh)\$'"

wisely_confirm_before_close="if -F '#{<=:#{window_panes},1}' \
    \"confirm kill-pane\" \
    \"if \\\"$is_shell\\\" \
    'kill-pane' \
    'confirm kill-pane'\""

# vim style key bindings
bind n   split-window -v -c '#{pane_current_path}'
bind s   split-window -v -c '#{pane_current_path}'
bind v   split-window -h -c '#{pane_current_path}'
bind C-s split-window -v -c '#{pane_current_path}'
bind C-v split-window -h -c '#{pane_current_path}'
bind C-n new-window      -c '#{pane_current_path}'
bind C-o confirm 'kill-pane -a'
bind o confirm 'kill-pane -a'
bind O resize-pane -Z
bind c "$wisely_confirm_before_close"
bind N new-window -c "#{pane_current_path}"
bind BTab previous-window
bind Tab next-window
bind T previous-window
bind t next-window
bind r swap-pane -D
bind R swap-pane -U
bind p paste-buffer -p
bind = select-layout tiled
# search for url etc
bind                 \\   copy-mode \; send -X search-backward '(https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]+|[^[:blank:]]*/[^[:blank:]]+|[^[:blank:]]+/[^[:blank:]]*|#?\<[[:xdigit:]]{6,}\>'
bind -n              M-\\ copy-mode \; send -X search-backward '(https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]+|[^[:blank:]]*/[^[:blank:]]+|[^[:blank:]]+/[^[:blank:]]*|#?\<[[:xdigit:]]{6,}\>'
bind -T copy-mode-vi \\                send -X search-backward '(https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]+|[^[:blank:]]*/[^[:blank:]]+|[^[:blank:]]+/[^[:blank:]]*|#?\<[[:xdigit:]]{6,}\>'
# browse url in current pane, requires `urlview`
bind                 x   capture-pane \;  save-buffer '/tmp/tmux-buffer' \; new-window -n 'urlview' '$SHELL -c "urlview < /tmp/tmux-buffer"'
bind -n              M-X capture-pane \;  save-buffer '/tmp/tmux-buffer' \; new-window -n 'urlview' '$SHELL -c "urlview < /tmp/tmux-buffer"'
bind -T copy-mode-vi x   capture-pane \;  save-buffer '/tmp/tmux-buffer' \; new-window -n 'urlview' '$SHELL -c "urlview < /tmp/tmux-buffer"'
# no regex syntax when doing incremental search :(
# https://github.com/tmux/tmux/issues/2205
bind /   copy-mode \;    command-prompt -i -I '#{pane_search_string}' -p '(search down)' 'send -X search-forward-incremental "%%%"'
bind ?   copy-mode \;    command-prompt -i -I '#{pane_search_string}' -p '(search up)'   'send -X search-backward-incremental "%%%"'
bind -T copy-mode-vi /   command-prompt -i -I '#{pane_search_string}' -p '(search down)' 'send -X search-forward-incremental "%%%"'
bind -T copy-mode-vi ?   command-prompt -i -I '#{pane_search_string}' -p '(search up)'   'send -X search-backward-incremental "%%%"'
bind -T copy-mode-vi v   send -X begin-selection
bind -T copy-mode-vi C-v send -X begin-selection \; send -X rectangle-toggle
bind -T copy-mode-vi y   send -X copy-pipe
bind -T copy-mode-vi i   send -X cancel
bind -T copy-mode-vi a   send -X cancel
bind -T copy-mode-vi u   send -X halfpage-up
bind -T copy-mode-vi d   send -X halfpage-down
bind -T copy-mode-vi m   send -X set-mark
bind -T copy-mode-vi `   { send -X jump-to-mark; send -X set-mark; send -X scroll-middle }
bind -T copy-mode-vi \'  { send -X jump-to-mark; send -X set-mark; send -X scroll-middle }
# shell integration, terminal emulator and the shell have to support OSC 133
bind -T copy-mode-vi [   send -X previous-prompt -o
bind -T copy-mode-vi ]   send -X next-prompt -o

# use the vim motion keys to move between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# use M-0 to M-9 to select windows, create new window if it doesn't exist
bind -n M-0 if 'tmux select-window -t :0' '' "new-window -t :0 -c '#{pane_current_path}'"
bind -n M-1 if 'tmux select-window -t :1' '' "new-window -t :1 -c '#{pane_current_path}'"
bind -n M-2 if 'tmux select-window -t :2' '' "new-window -t :2 -c '#{pane_current_path}'"
bind -n M-3 if 'tmux select-window -t :3' '' "new-window -t :3 -c '#{pane_current_path}'"
bind -n M-4 if 'tmux select-window -t :4' '' "new-window -t :4 -c '#{pane_current_path}'"
bind -n M-5 if 'tmux select-window -t :5' '' "new-window -t :5 -c '#{pane_current_path}'"
bind -n M-6 if 'tmux select-window -t :6' '' "new-window -t :6 -c '#{pane_current_path}'"
bind -n M-7 if 'tmux select-window -t :7' '' "new-window -t :7 -c '#{pane_current_path}'"
bind -n M-8 if 'tmux select-window -t :8' '' "new-window -t :8 -c '#{pane_current_path}'"
bind -n M-9 if 'tmux select-window -t :9' '' "new-window -t :9 -c '#{pane_current_path}'"

bind 0 if 'tmux select-window -t :0' '' "new-window -t :0 -c '#{pane_current_path}'"
bind 1 if 'tmux select-window -t :1' '' "new-window -t :1 -c '#{pane_current_path}'"
bind 2 if 'tmux select-window -t :2' '' "new-window -t :2 -c '#{pane_current_path}'"
bind 3 if 'tmux select-window -t :3' '' "new-window -t :3 -c '#{pane_current_path}'"
bind 4 if 'tmux select-window -t :4' '' "new-window -t :4 -c '#{pane_current_path}'"
bind 5 if 'tmux select-window -t :5' '' "new-window -t :5 -c '#{pane_current_path}'"
bind 6 if 'tmux select-window -t :6' '' "new-window -t :6 -c '#{pane_current_path}'"
bind 7 if 'tmux select-window -t :7' '' "new-window -t :7 -c '#{pane_current_path}'"
bind 8 if 'tmux select-window -t :8' '' "new-window -t :8 -c '#{pane_current_path}'"
bind 9 if 'tmux select-window -t :9' '' "new-window -t :9 -c '#{pane_current_path}'"

bind -n M-^ select-window -t :^
bind -n M-$ select-window -t :$

bind ^ select-window -t :^
bind _ select-window -t :^
bind $ select-window -t :$

# Switch to next/previous session
bind ) switch-client -n
bind ( switch-client -p
bind -T copy-mode-vi ) switch-client -n
bind -T copy-mode-vi ( switch-client -p
bind -n M-) switch-client -n
bind -n M-( switch-client -p

# switch to last used session, like vim's <C-^> or <C-6>
bind    C-^   switch-client -l
bind    C-6   switch-client -l
bind -n M-C-^ switch-client -l
bind -n M-C-6 switch-client -l

bind -n M-: command-prompt
bind -n M-/ copy-mode \; command-prompt -i -I '#{pane_search_string}' -p '(search down)' 'send -X search-forward-incremental "%%%"'
bind -n M-? copy-mode \; command-prompt -i -I '#{pane_search_string}' -p '(search up)' 'send -X search-backward-incremental "%%%"'

# use Escape to enter copy mode if not running an TUI app
running_tui="ps h -o stat,args -t '#{pane_tty}' | grep -qE \
'^\\S+\\+\\s+(sudo(\\s+--?(\\w|-)+((\\s+|=)\\S+)?)*\\s+)?\\S*\
(n?vim?|vimdiff|emacs(client)?|lem|nano|helix|kak|\
tmux|vifm|yazi|ranger|lazygit|h?top|gdb|fzf|nmtui|\
sudoedit|ssh|crontab|asciinema|w3m)'"

bind -n Escape   if -F '#{pane_in_mode}' 'send-keys q' { if "$running_tui" 'send-keys Escape' 'copy-mode' }
bind    Escape   copy-mode
bind -n M-Escape copy-mode

# integration with TUI apps
bind -n M-h if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-h' { if -F '#{pane_at_left}'   '' 'select-pane -L' }
bind -n M-j if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind -n M-k if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-k' { if -F '#{pane_at_top}'    '' 'select-pane -U' }
bind -n M-l if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-l' { if -F '#{pane_at_right}'  '' 'select-pane -R' }
bind -T copy-mode-vi M-h if -F '#{pane_at_left}'   '' 'select-pane -L'
bind -T copy-mode-vi M-j if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi M-k if -F '#{pane_at_top}'    '' 'select-pane -U'
bind -T copy-mode-vi M-l if -F '#{pane_at_right}'  '' 'select-pane -R'

bind -n M-Left  if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-Left'  { if -F '#{pane_at_left}'   '' 'select-pane -L' }
bind -n M-Down  if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-Down'  { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind -n M-Up    if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-Up'    { if -F '#{pane_at_top}'    '' 'select-pane -U' }
bind -n M-Right if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-Right' { if -F '#{pane_at_right}'  '' 'select-pane -R' }
bind -T copy-mode-vi M-Left  if -F '#{pane_at_left}'   '' 'select-pane -L'
bind -T copy-mode-vi M-Down  if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi M-Up    if -F '#{pane_at_top}'    '' 'select-pane -U'
bind -T copy-mode-vi M-Right if -F '#{pane_at_right}'  '' 'select-pane -R'

bind -n M-t if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-t' 'select-pane -t 1'
bind -n M-w if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-w' 'select-pane -t :.+'
bind -n M-W if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-w' 'select-pane -t :.-'
bind -n M-n if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-n' 'split-window -v -c "#{pane_current_path}"'
bind -n M-s if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-s' 'split-window -v -c "#{pane_current_path}"'
bind -n M-v if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-v' 'split-window -h -c "#{pane_current_path}"'
bind -n M-v if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-v' 'split-window -h -c "#{pane_current_path}"'
bind -n M-c if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-c' "$wisely_confirm_before_close"
bind -n M-o if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-o' "confirm 'kill-pane -a'"
bind -n M-r if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-r' 'swap-pane -D'
bind -n M-R if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-R' 'swap-pane -U'
bind -n M-p if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-p' 'last-pane'
bind -n M-z if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-z' 'resize-pane -Z'
bind -n M-= if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-=' 'select-layout tiled'
bind -T copy-mode-vi M-t select-pane -t 1
bind -T copy-mode-vi M-w select-pane -t :.+
bind -T copy-mode-vi M-W select-pane -t :.-
bind -T copy-mode-vi M-n split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-s split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-v split-window -h -c '#{pane_current_path}'
bind -T copy-mode-vi M-c "$wisely_confirm_before_close"
bind -T copy-mode-vi M-o confirm 'kill-pane -a'
bind -T copy-mode-vi M-r swap-pane -D
bind -T copy-mode-vi M-R swap-pane -U
bind -T copy-mode-vi M-p last-pane
bind -T copy-mode-vi M-z resize-pane -Z
bind -T copy-mode-vi M-= select-layout tiled

# use the vim motion keys to resize panes
bind -r C-h resize-pane -L 4
bind -r C-j resize-pane -D 2
bind -r C-k resize-pane -U 2
bind -r C-l resize-pane -R 4

bind -r < resize-pane -L 4
bind -r > resize-pane -R 4
bind -r , resize-pane -L 4
bind -r . resize-pane -R 4
bind -r - run "tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') - 2))"
bind -r + run "tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') + 2))"

bind -n M-< if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-<' 'resize-pane -L 4'
bind -n M-> if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M->' 'resize-pane -R 4'
bind -n M-, if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-<' 'resize-pane -L 4'
bind -n M-. if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M->' 'resize-pane -R 4'
bind -n M-- if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M--' "run \"tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') - 2))\""
bind -n M-+ if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-+' "run \"tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') + 2))\""
bind -T copy-mode-vi M-< resize-pane -L 4
bind -T copy-mode-vi M-> resize-pane -R 4
bind -T copy-mode-vi M-, resize-pane -L 4
bind -T copy-mode-vi M-. resize-pane -R 4
bind -T copy-mode-vi M-- run "tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') - 2))"
bind -T copy-mode-vi M-+ run "tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') + 2))"

bind -n M-Z resize-pane -Z
bind -n M-O resize-pane -Z
bind -n M-C confirm kill-window
bind -n M-N new-window      -c '#{pane_current_path}'
bind -n M-S split-window -v -c '#{pane_current_path}'
bind -n M-V split-window -h -c '#{pane_current_path}'
bind -n M-P last-pane
bind -T copy-mode-vi M-Z resize-pane -Z
bind -T copy-mode-vi M-O resize-pane -Z
bind -T copy-mode-vi M-C confirm kill-window
bind -T copy-mode-vi M-N new-window      -c '#{pane_current_path}'
bind -T copy-mode-vi M-S split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-V split-window -h -c '#{pane_current_path}'
bind -T copy-mode-vi M-P last-pane

# use vim motion keys while in copy mode
set -gq mode-keys vi
set -gq status-keys emacs

# replace current session with an existing session
bind X \
  confirm -p "attach another session and kill current session (#S)? (y/n)" \
  "if-shell \"((\$(tmux display -p '#{session_many_attached}') > 0))\" \
    choose-session \
    \"run-shell \\\"tmux choose-session \
        \\\\\\\"switch-client -t '%%'; \
            kill-session -t '\$(tmux display -p '#S')'\\\\\\\"\\\"\""

# Use popup menu to select a layout
bind Space display-menu -x C -y C \
    -T '#[align=centre]Switch Layout' \
    'Tiled'           +  { select-layout tiled } \
    'Main Horizontal' _  { select-layout main-horizontal } \
    'Main Vertical'   |  { select-layout main-vertical } \
    'Even Horizontal' \\ { select-layout even-horizontal } \
    'Even Vertical'   -  { select-layout even-vertical }

# register tpm plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# tpm plugin setups
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '1'

if '[ -n "$XDG_DATA_HOME" ]' {
    setenv -g TMUX_DATA_HOME "$XDG_DATA_HOME/tmux"
    setenv -g TMUX_PLUGIN_MANAGER_PATH "$XDG_DATA_HOME/tmux/plugin"
} {
    setenv -g TMUX_DATA_HOME "$HOME/.local/share/tmux"
    setenv -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.local/share/tmux/plugin"
}

# bootstrap tpm (tmux plugin manager)
set-hook -ga session-created {
    if '[ ! -f "$TMUX_DATA_HOME/no-bootstrap" -a ! -d "$TMUX_DATA_HOME/plugin/tpm" ]' {
        command-prompt -p 'Install tpm (tmux plugin manager)? [y]es/[n]o/[never]' {
            if -F "#{m/ri:(y|yes),%%}" {
                run 'mkdir -p "$TMUX_DATA_HOME/plugin" && \
                    git clone https://github.com/tmux-plugins/tpm "$TMUX_DATA_HOME/plugin/tpm" && \
                    echo "Tpm installed, press <Prefix> + <I> to install plugins"'
                if '[ -x "$TMUX_DATA_HOME/plugin/tpm/tpm" ]' {
                    run "$TMUX_DATA_HOME/plugin/tpm/tpm"
                }
            } {
                if -F "#{m/ri:never,%%}" {
                    run 'mkdir -p "$TMUX_DATA_HOME" && \
                        touch "$TMUX_DATA_HOME/no-bootstrap" && \
                        echo "Tpm bootstrap disabled, remove '\''$TMUX_DATA_HOME/no-bootstrap'\'' to re-enable"'
                }
            }
        }
    }

}

if '[ -x "$TMUX_DATA_HOME/plugin/tpm/tpm" ]' {
    run "$TMUX_DATA_HOME/plugin/tpm/tpm"
}

# re-source current config file once to activate plugins
if '[ -z "$TMUX_RESOURCED_CONFIG" ]' {
    setenv -g TMUX_RESOURCED_CONFIG 1
    run 'tmux source "#{current_file}"'
}

# vim:ft=tmux:ts=4:sts=4:sw=4:et:
