# vim:ft=tmux:ts=4:sts=4:sw=4:et:fdm=marker:fmr=<<<,>>>:

### Default behavior <<<
# Tell Tmux that outside terminal supports true color
set -gq default-terminal 'tmux-256color'
set -gqa terminal-overrides ',*:Tc'

# Stop tmux from launching login shells every time when a new pane is created
set-hook -g session-created {
    set -gq default-command "$SHELL"
}

set      -gq display-time 1024
set      -gq history-limit 65536
set      -gq renumber-windows on
set-hook -g  window-linked 'move-window -r'

# Prevent lagging Esc in vim
set -s escape-time 0

# Start windows and panes from 1
set -gq base-index 1
setw -g pane-base-index 1
# >>>

### Mouse settings <<<
set -gq mouse on

# Don't clear selection on mouse drag/click
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-no-clear
bind -T copy-mode-vi MouseDown1Pane send-keys -X clear-selection
bind -T copy-mode-vi DoubleClick1Pane send-keys -X select-word
#>>>

### UI settings <<<
# Set color for statusline
set -gq status-style                 fg=white
set -gq window-status-activity-style fg=default
set -gq window-status-bell-style     fg=black,bg=magenta
set -gq window-status-current-style  fg=black,bg=yellow
set -gq mode-style                   reverse

# Set color for pane border
set -gq pane-border-style fg=brightblack
set -gq pane-active-border-style fg=white

# Set color for search matches
set -gq copy-mode-match-style fg=black,bg=blue
set -gq copy-mode-current-match-style fg=black,bg=yellow

# Set current window format in statusline
setw -g window-status-current-format ' #{?window_zoomed_flag,#[italics],}#{window_name} '
setw -g window-status-format ' #{?window_zoomed_flag,#[italics],}#{window_name} '

set -gq bell-action none
set -gq focus-events on
set -gq monitor-activity on
set -gq visual-activity off
set -gq status-interval 1
set -gq automatic-rename on
set -gq automatic-rename-format \
    '#{?#{==:#{pane_current_path},#{HOME}},~,#{b:pane_current_path}}'

set -gq status off
set -gq status-position top
set -gq status-left-length 64
set -gq status-right-length 64
set -gq status-left '#[fg=black,bg=yellow]#{?#{==:#{key-table},none}, PASSTHROUGH ,}\
#[bg=default]#{?#{==:#{key-table},none}, ,}\
#[fg=black,bg=yellow]#{?pane_input_off, LOCKED ,}'
set -gq status-right "#[fg=black,bg=blue] #S #[bg=default]"
# Tmux don't have 'absolute-centre' option value until v3.2
if "ver=\$(tmux -V | grep -o '[[:digit:].]\\+');  \
        ver_major=\$(echo \$ver | cut -d . -f1); \
        ver_minor=\$(echo \$ver | cut -d . -f2); \
        [ \$ver_major -gt 3 ] ||                 \
        [ \$ver_major -eq 3 -a \$ver_minor -ge 2 ]" \
    { set -gq status-justify absolute-centre }

# Conceal statusline only if one window is opened and current session is
# unnamed, i.e. with a digit name
set_status="if -F '#{==:#{session_windows},1}' \
    'set status off' \
    'set status on'"
set-hook -ga window-linked          "$set_status"
set-hook -g  window-unlinked        "$set_status"
set-hook -g  client-session-changed "$set_status"

# Pane border format
set -gq pane-border-format " #P #T "
#>>>

### System clipboard <<<
set -gq set-clipboard on
set -gq copy-command "sh -c 'if command -v termux-clipboard-set >/dev/null 2>&1; then \
    termux-clipboard-set; \
else \
    case \"\$(uname -s)\" in \
        Linux*) \
            [ \"$XDG_SESSION_TYPE\" = x11 ] && \
                xclip -in -selection clipboard || \
                wl-copy ;; \
        Darwin*) \
            pbcopy ;; \
        MINGW*|CYGWIN*) \
            clip.exe ;; \
        Android*) \
            termux-clipboard-set ;; \
    esac \
fi'"

# Paste from system clipboard
paste_command="if command -v termux-clipboard-get >/dev/null 2>&1; then \
    termux-clipboard-get; \
else \
    case \"\$(uname -s)\" in \
        Linux*) \
            [ \"$XDG_SESSION_TYPE\" = x11 ] && \
                xclip -out -selection clipboard || \
                wl-paste --no-newline ;; \
        Darwin*) \
            pbpaste ;; \
        MINGW*|CYGWIN*) \
            powershell.exe Get-Clipboard ;; \
        Android*) \
            termux-clipboard-get ;; \
    esac \
fi | tmux load-buffer - && tmux paste-buffer"

bind ] run "sh -c '$paste_command'"
bind p run "sh -c '$paste_command'"
bind -T copy-mode-vi p { send -X cancel; run "sh -c '$paste_command'" }
#>>>

### Command aliases & enhancements <<<
set -s command-alias[10] show-pane-name='set -gq pane-border-status top'
set -s command-alias[11] hide-pane-name='set -gq pane-border-status off'
set -s command-alias[12] toggle-pane-name="if \
    '[ \"\$(tmux show -g pane-border-status)\" = \"pane-border-status off\" ]' \
    'show-pane-name' \
    'hide-pane-name'"
set -s command-alias[13] rename-pane='select-pane -T'
set -s command-alias[14] lock-pane="select-pane -d"
set -s command-alias[15] unlock-pane="select-pane -e"
set -s command-alias[16] reload-config="run \
    \"tmux display -p '#{config_files}' \
        | tr ',' '\\n' \
        | xargs -I % tmux source %\""
set -s command-alias[17] dump-history="run \
    'tmux command-prompt -p \"save history to file:\" \
            -I \"#{pane_current_path}/tmux-hist-\$(date +%Y-%m-%d-%H-%M-%S).txt\" \
        \"capture-pane -S - -E -; save-buffer %1; delete-buffer\"'"

# Colored choose-tree
set -s command-alias[18] choose-tree="choose-tree -F '#{?pane_format,\
#[fg=green]#{pane_current_command} #[fg=white]#{pane_title},\
#{?window_format,\
#[fg=yellow]#{?window_zoomed_flag,#[italics],}#{window_name}#{?#{==:#{window_panes},1}, \
#{?#{!=:#{?window_zoomed_flag,#[italics],}#{window_name},#[fg=green]#{pane_current_command}},\
#[fg=green]#{pane_current_command} ,}\
#[fg=white]#{pane_title},},\
#{?session_grouped, (group #{session_group}: #{session_group_list}),}\
#{?session_attached,#[fg=blue](attached),#[fg=magenta](unattached)}}}'"

# Rebind 'w' to the colored choose-tree command
bind w choose-tree -Zw
bind -n MouseDown1StatusRight if -F '#{pane_in_mode}' \
    { send-keys q } \
    { choose-tree -Zw }

# Use fzf to select tmux windows
# Source: https://stackoverflow.com/a/38160854
tmux_list_windows="tmux list-windows -aF '##S:##I (##W)' | \
    sed -e 's/^\\\\([^:]*\\\\):/\\\\x1b[34m\\\\1\\\\x1b[0m:/' \
        -e 's/:\\\\([0-9]\\\\+\\\\) /:\\\\x1b[32m\\\\1\\\\x1b[0m /' \
        -e 's/(\\\\(.*\\\\))\$/(\\\\x1b[33m\\\\1\\\\x1b[0m)/'"

set -s command-alias[19] fzf-find-window="run -b \"$tmux_list_windows | \
    fzf --no-preview --ansi --color hl:reverse:-1,hl+:reverse:-1 \
        --prompt 'Tmux windows> ' \
        --tmux center,\
\\\$(w=\\\$(tmux display -p '#{window_width}'); echo \\\$(( w < 64 ? w : 64 ))),\
\\\$(h=\\\$(tmux display -p '#{window_height}'); echo \\\$(( h < 16 ? h : 16 ))),border-native \
        --bind \\\"ctrl-x:execute(echo {+} | \
            sed 's/([^()]*)//g' | \
            sed 's/\\\\s\\\\+/\\\\n/g' | \
            tac | \
            xargs -I % tmux kill-window -t %)+reload($tmux_list_windows)\\\" | \
    tail -n1 | \
    sed 's/\\s*(.*)\$//' | \
    xargs -r tmux switch -t\""

if 'fzf --version' {
    bind f fzf-find-window
    bind -n M-F fzf-find-window
    bind -T copy-mode-vi M-F fzf-find-window
}
# >>>

### Vim style key bindings <<<
# Use vim motion keys while in copy mode
set -gq mode-keys vi
set -gq status-keys emacs

is_shell="ps -o comm= -t '#{pane_tty}' | \
    tail -n1 | \
    grep -qE '((ba|da|fi|z)?sh)\$'"

smart_close="if -F '#{<=:#{window_panes},1}' \
    \"confirm kill-pane\" \
    \"if \\\"$is_shell\\\" \
    'kill-pane' \
    'confirm kill-pane'\""

bind C-r choose-buffer
bind \"  choose-buffer
bind -T copy-mode-vi \" choose-buffer

bind n   split-window -v -c '#{pane_current_path}'
bind s   split-window -v -c '#{pane_current_path}'
bind v   split-window -h -c '#{pane_current_path}'
bind C-s split-window -v -c '#{pane_current_path}'
bind C-v split-window -h -c '#{pane_current_path}'
bind C-n new-window   -a -c '#{pane_current_path}'
bind C-o confirm 'kill-pane -a'
bind o confirm 'kill-pane -a'
bind O resize-pane -Z
bind c "$smart_close"
bind N new-window -a -c "#{pane_current_path}"
bind BTab previous-window
bind Tab next-window
bind T previous-window
bind t next-window
bind r swap-pane -D
bind R swap-pane -U
bind = select-layout tiled
# No regex syntax when doing incremental search :(
# https://github.com/tmux/tmux/issues/2205
bind -T copy-mode-vi v   send -X begin-selection
bind -T copy-mode-vi C-v send -X begin-selection \; send -X rectangle-toggle
bind -T copy-mode-vi y   send -X copy-pipe
bind -T copy-mode-vi i   send -X cancel
bind -T copy-mode-vi a   send -X cancel
bind -T copy-mode-vi I   send -X cancel
bind -T copy-mode-vi A   send -X cancel
bind -T copy-mode-vi u   send -X halfpage-up
bind -T copy-mode-vi d   send -X halfpage-down
bind -T copy-mode-vi m   send -X set-mark
bind -T copy-mode-vi `   { send -X jump-to-mark; send -X set-mark; send -X scroll-middle }
bind -T copy-mode-vi \'  { send -X jump-to-mark; send -X set-mark; send -X scroll-middle }
# Shell integration, terminal emulator and the shell have to support OSC 133
bind -T copy-mode-vi [   send -X previous-prompt -o
bind -T copy-mode-vi ]   send -X next-prompt -o

# Use vim style z... bindings to scroll
bind-key -T copy-mode-vi z switch-client -T scroll-mode-vi
# Automatically return to root key-table after scroll command
bind-key -T scroll-mode-vi -r Any switch-client -T root
# Use zt/zz/zb to scroll to top/middle/bottom
bind-key -T scroll-mode-vi t send-keys -X scroll-top
bind-key -T scroll-mode-vi z send-keys -X scroll-middle
bind-key -T scroll-mode-vi b send-keys -X scroll-bottom
# Same as zt/zz/zh, but put cursor at start of line
bind-key -T scroll-mode-vi Enter send-keys -X scroll-top    \; send-keys -X start-of-line
bind-key -T scroll-mode-vi .     send-keys -X scroll-middle \; send-keys -X start-of-line
bind-key -T scroll-mode-vi -     send-keys -X scroll-bottom \; send-keys -X start-of-line

# Use the vim motion keys to move between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

running_tui="ps -o stat=,args= -t '#{pane_tty}' | grep -qE \
'\\S+\\+\\s+(sudo\\s+)?(.*sh\s+-c\s+)?\\S*\
(n?vim?|vimdiff|emacs(client)?|lem|nano|h(eli)?x|kak|\
tmux|vifm|yazi|ranger|lazygit|h?top|gdb|fzf|nmtui|\
sudoedit|crontab|asciinema|w3m)(\$|\\s+)'"

bind -n Escape   if -F '#{pane_in_mode}' 'send-keys q' { if "$running_tui" 'send-keys Escape' 'copy-mode' }
bind -n M-Escape copy-mode
bind -n M-: command-prompt

# Integration with TUI apps
bind -n M-h if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-h' { if -F '#{pane_at_left}'   '' 'select-pane -L' }
bind -n M-j if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind -n M-k if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-k' { if -F '#{pane_at_top}'    '' 'select-pane -U' }
bind -n M-l if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-l' { if -F '#{pane_at_right}'  '' 'select-pane -R' }
bind -T copy-mode-vi M-h if -F '#{pane_at_left}'   '' 'select-pane -L'
bind -T copy-mode-vi M-j if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi M-k if -F '#{pane_at_top}'    '' 'select-pane -U'
bind -T copy-mode-vi M-l if -F '#{pane_at_right}'  '' 'select-pane -R'

bind -n M-Left  if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-Left'  { if -F '#{pane_at_left}'   '' 'select-pane -L' }
bind -n M-Down  if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-Down'  { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind -n M-Up    if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-Up'    { if -F '#{pane_at_top}'    '' 'select-pane -U' }
bind -n M-Right if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-Right' { if -F '#{pane_at_right}'  '' 'select-pane -R' }
bind -T copy-mode-vi M-Left  if -F '#{pane_at_left}'   '' 'select-pane -L'
bind -T copy-mode-vi M-Down  if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi M-Up    if -F '#{pane_at_top}'    '' 'select-pane -U'
bind -T copy-mode-vi M-Right if -F '#{pane_at_right}'  '' 'select-pane -R'

bind -n M-t if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-t' 'select-pane -t 1'
bind -n M-w if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-w' 'select-pane -t :.+'
bind -n M-W if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-w' 'select-pane -t :.-'
bind -n M-n if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-n' 'split-window -v -c "#{pane_current_path}"'
bind -n M-s if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-s' 'split-window -v -c "#{pane_current_path}"'
bind -n M-v if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-v' 'split-window -h -c "#{pane_current_path}"'
bind -n M-v if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-v' 'split-window -h -c "#{pane_current_path}"'
bind -n M-c if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-c' "$smart_close"
bind -n M-q if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-q' "$smart_close"
bind -n M-o if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-o' "confirm 'kill-pane -a'"
bind -n M-r if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-r' 'swap-pane -D'
bind -n M-R if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-R' 'swap-pane -U'
bind -n M-p if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-p' 'last-pane'
bind -n M-z if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ] || [ \$(tmux display -p '#{pane_in_mode}') = 1 ]" 'send-keys M-z' 'resize-pane -Z'
bind -n M-= if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-=' 'select-layout tiled'
bind -T copy-mode-vi M-t select-pane -t 1
bind -T copy-mode-vi M-w select-pane -t :.+
bind -T copy-mode-vi M-W select-pane -t :.-
bind -T copy-mode-vi M-n split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-s split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-v split-window -h -c '#{pane_current_path}'
bind -T copy-mode-vi M-c "$smart_close"
bind -T copy-mode-vi M-q "$smart_close"
bind -T copy-mode-vi M-o confirm 'kill-pane -a'
bind -T copy-mode-vi M-r swap-pane -D
bind -T copy-mode-vi M-R swap-pane -U
bind -T copy-mode-vi M-p last-pane
bind -T copy-mode-vi M-z resize-pane -Z
bind -T copy-mode-vi M-= select-layout tiled

bind -r < run "tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') - 2))"
bind -r , run "tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') - 2))"
bind -r > run "tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') + 2))"
bind -r . run "tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') + 2))"
bind -r - run "tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') - 2))"
bind -r + run "tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') + 2))"

bind -n M-< if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-<' "run \"tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') - 2))\""
bind -n M-, if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-<' "run \"tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') - 2))\""
bind -n M-> if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M->' "run \"tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') + 2))\""
bind -n M-. if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M->' "run \"tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') + 2))\""
bind -n M-- if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M--' "run \"tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') - 2))\""
bind -n M-+ if "$running_tui && [ \$(tmux display -p '#{pane_input_off}') = 0 ]" 'send-keys M-+' "run \"tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') + 2))\""
bind -T copy-mode-vi M-< run "tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') - 2))"
bind -T copy-mode-vi M-, run "tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') - 2))"
bind -T copy-mode-vi M-> run "tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') + 2))"
bind -T copy-mode-vi M-. run "tmux resize-pane -x \$((\$(tmux display -p '#{pane_width}') + 2))"
bind -T copy-mode-vi M-- run "tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') - 2))"
bind -T copy-mode-vi M-+ run "tmux resize-pane -y \$((\$(tmux display -p '#{pane_height}') + 2))"

bind -n M-Z resize-pane -Z
bind -n M-O resize-pane -Z
bind -n M-C confirm kill-pane
bind -n M-Q confirm kill-pane
bind -n M-N new-window   -a -c '#{pane_current_path}'
bind -n M-S split-window -v -c '#{pane_current_path}'
bind -n M-V split-window -h -c '#{pane_current_path}'
bind -n M-P last-pane
bind -T copy-mode-vi M-Z resize-pane -Z
bind -T copy-mode-vi M-O resize-pane -Z
bind -T copy-mode-vi M-C confirm kill-pane
bind -T copy-mode-vi M-Q confirm kill-pane
bind -T copy-mode-vi M-N new-window   -a -c '#{pane_current_path}'
bind -T copy-mode-vi M-S split-window -v -c '#{pane_current_path}'
bind -T copy-mode-vi M-V split-window -h -c '#{pane_current_path}'
bind -T copy-mode-vi M-P last-pane
# >>>

### Moving between sessions/windows/panes <<<
# Move panes
bind S command-prompt -p 'send pane to:'   "join-pane -v -t '%%'"
bind J command-prompt -p 'join pane from:' "join-pane -v -s '%%'"

# Replace current session with an existing session
bind x \
  confirm -p "Attach another session and kill current session (#S)? (y/n)" \
  "if-shell \"((\$(tmux display -p '#{session_many_attached}') > 0))\" \
    choose-session \
    \"run-shell \\\"tmux choose-session \
        \\\\\\\"switch-client -t '%%'; \
            kill-session -t '\$(tmux display -p '#S')'\\\\\\\"\\\"\""

# Use M-0 to M-9 to select windows, create new window if it doesn't exist
bind -n M-0 if 'tmux select-window -t :0' '' "new-window -t :0 -c '#{pane_current_path}'"
bind -n M-1 if 'tmux select-window -t :1' '' "new-window -t :1 -c '#{pane_current_path}'"
bind -n M-2 if 'tmux select-window -t :2' '' "new-window -t :2 -c '#{pane_current_path}'"
bind -n M-3 if 'tmux select-window -t :3' '' "new-window -t :3 -c '#{pane_current_path}'"
bind -n M-4 if 'tmux select-window -t :4' '' "new-window -t :4 -c '#{pane_current_path}'"
bind -n M-5 if 'tmux select-window -t :5' '' "new-window -t :5 -c '#{pane_current_path}'"
bind -n M-6 if 'tmux select-window -t :6' '' "new-window -t :6 -c '#{pane_current_path}'"
bind -n M-7 if 'tmux select-window -t :7' '' "new-window -t :7 -c '#{pane_current_path}'"
bind -n M-8 if 'tmux select-window -t :8' '' "new-window -t :8 -c '#{pane_current_path}'"
bind -n M-9 if 'tmux select-window -t :9' '' "new-window -t :9 -c '#{pane_current_path}'"

bind 0 if 'tmux select-window -t :0' '' "new-window -t :0 -c '#{pane_current_path}'"
bind 1 if 'tmux select-window -t :1' '' "new-window -t :1 -c '#{pane_current_path}'"
bind 2 if 'tmux select-window -t :2' '' "new-window -t :2 -c '#{pane_current_path}'"
bind 3 if 'tmux select-window -t :3' '' "new-window -t :3 -c '#{pane_current_path}'"
bind 4 if 'tmux select-window -t :4' '' "new-window -t :4 -c '#{pane_current_path}'"
bind 5 if 'tmux select-window -t :5' '' "new-window -t :5 -c '#{pane_current_path}'"
bind 6 if 'tmux select-window -t :6' '' "new-window -t :6 -c '#{pane_current_path}'"
bind 7 if 'tmux select-window -t :7' '' "new-window -t :7 -c '#{pane_current_path}'"
bind 8 if 'tmux select-window -t :8' '' "new-window -t :8 -c '#{pane_current_path}'"
bind 9 if 'tmux select-window -t :9' '' "new-window -t :9 -c '#{pane_current_path}'"

bind -n M-^ select-window -t :^
bind -n M-$ select-window -t :$

bind ^ select-window -t :^
bind _ select-window -t :^
bind $ select-window -t :$

# Swap/move windows
bind '{' { swap-window -t -1; select-window -t -1 }
bind '}' { swap-window -t +1; select-window -t +1 }
bind -T copy-mode-vi 'M-{' { swap-window -t -1; select-window -t -1 }
bind -T copy-mode-vi 'M-}' { swap-window -t +1; select-window -t +1 }
bind -n 'M-{' { swap-window -t -1; select-window -t -1 }
bind -n 'M-}' { swap-window -t +1; select-window -t +1 }

bind C-S-PageUp   { swap-window -t -1; select-window -t -1 }
bind C-S-PageDown { swap-window -t +1; select-window -t +1 }
bind -T copy-mode-vi C-S-PageUp   { swap-window -t -1; select-window -t -1 }
bind -T copy-mode-vi C-S-PageDown { swap-window -t +1; select-window -t +1 }
bind -n C-S-PageUp   { swap-window -t -1; select-window -t -1 }
bind -n C-S-PageDown { swap-window -t +1; select-window -t +1 }

# Switch to next/previous window
bind ! previous-window
bind @ next-window
bind -T copy-mode-vi ! previous-window
bind -T copy-mode-vi @ next-window
bind -n M-! previous-window
bind -n M-@ next-window

# Switch to next/previous session
bind ) switch-client -n
bind ( switch-client -p
bind -T copy-mode-vi ) switch-client -n
bind -T copy-mode-vi ( switch-client -p
bind -n M-) switch-client -n
bind -n M-( switch-client -p

# Switch to last used session, like vim's <C-^> or <C-6>
bind    C-^   switch-client -l
bind    C-6   switch-client -l
bind -n M-C-^ switch-client -l
bind -n M-C-6 switch-client -l

# switch to last used window
bind    C-]   select-window -l
bind    C-5   select-window -l
bind -n M-C-] select-window -l
bind -n M-C-5 select-window -l

# Use popup menu to select a layout
bind Space display-menu -x C -y C \
    -T '#[align=centre]Switch Layout' \
    'Tiled'           +  { select-layout tiled } \
    'Main Horizontal' _  { select-layout main-horizontal } \
    'Main Vertical'   |  { select-layout main-vertical } \
    'Even Horizontal' \\ { select-layout even-horizontal } \
    'Even Vertical'   -  { select-layout even-vertical }
# >>>

### Manage nested tmux sessions <<<
# - C-Space as prefix
# - M-S-Down toggles off all keybindings except for M-S-Up
#   (transfer control to inner session)
# - M-S-Up toggles keybindings back (regain control)
# Ref:
# https://www.freecodecamp.org/news/tmux-in-practice-local-and-nested-remote-tmux-sessions-4f7ba5db8795
# https://github.com/tmux/tmux/issues/237
# http://stahlke.org/dan/tmux-nested
set -gq prefix None
bind -n      C-Space  switchc -T prefix
bind         C-Space  send-prefix
bind -n      M-S-Down {
    set key-table none
    if -F '#{==:#{status},off}' {
        display 'Keybinding passthrough ON'
    }
}
bind -T none M-S-Up {
    set -u key-table
    if -F '#{==:#{status},off}' {
        display 'Keybinding passthrough OFF'
    }
}
# Prevent sub-session from transferring control to sub-sub-session
# in which case it won't be able to regain control beaus the M-S-Up
# key will be captured by the main session
bind -T none M-S-Down display 'Already in passthrough mode'
bind -n      M-S-Up   display 'Already exited passthrough mode'
#>>>

### Plugins <<<
# Register tpm plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Tpm plugin setups
set -g @resurrect-save 'C-s'
set -g @resurrect-restore 'C-z'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-capture-pane-contents 'off'
set -g @continuum-restore 'off'
set -g @continuum-save-interval '1'

if '[ -n "$XDG_DATA_HOME" ]' {
    setenv -g TMUX_DATA_HOME "$XDG_DATA_HOME/tmux"
    setenv -g TMUX_PLUGIN_MANAGER_PATH "$XDG_DATA_HOME/tmux/plugin"
} {
    setenv -g TMUX_DATA_HOME "$HOME/.local/share/tmux"
    setenv -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.local/share/tmux/plugin"
}

# bootstrap tpm (tmux plugin manager)
set-hook -g session-created[1] {
    if '[ ! -f "$TMUX_DATA_HOME/no-bootstrap" -a ! -d "$TMUX_DATA_HOME/plugin/tpm" ]' {
        command-prompt -p 'Install tpm (tmux plugin manager)? [y]es/[n]o/[never]' {
            if -F "#{m/ri:(y|yes),%%}" {
                run 'mkdir -p "$TMUX_DATA_HOME/plugin" && \
                    git clone https://github.com/tmux-plugins/tpm "$TMUX_DATA_HOME/plugin/tpm" && \
                    echo "Tpm installed, press <Prefix> + <I> to install plugins"'
                if '[ -x "$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm" ]' {
                    run "$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm"
                }
            } {
                if -F "#{m/ri:never,%%}" {
                    run 'mkdir -p "$TMUX_DATA_HOME" && \
                        touch "$TMUX_DATA_HOME/no-bootstrap" && \
                        echo "Tpm bootstrap disabled, remove '\''$TMUX_DATA_HOME/no-bootstrap'\'' to re-enable"'
                }
            }
        }
    }

    if '[ -x "$TMUX_PLUGIN_MANAGER_PATH/tmux-resurrect/scripts/restore.sh" -a \
            -s "$TMUX_DATA_HOME/resurrect/last" -a \
            -z "$TMUX_CONFIRMED_RESTORE" ]' {
        setenv -g TMUX_CONFIRMED_RESTORE 1
        command-prompt -p 'Restore previous session? (y/N)' {
            if -F "#{m/ri:(y|yes),%%}" {
                run '"$TMUX_PLUGIN_MANAGER_PATH"/tmux-resurrect/scripts/restore.sh'
            }
        }
    }

    # Run this hook only once
    set-hook -gu session-created[1]
}

if '[ -x "$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm" ]' {
    run "$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm"
}

# Re-source current config file once to activate plugins
if '[ -z "$TMUX_RESOURCED_CONFIG" ]' {
    setenv -g TMUX_RESOURCED_CONFIG 1
    run 'tmux source "#{current_file}"'
}
# >>>
