diff --git a/lua/cmp_codecompanion/models.lua b/lua/cmp_codecompanion/models.lua
index b662d18..a82d104 100644
--- a/lua/cmp_codecompanion/models.lua
+++ b/lua/cmp_codecompanion/models.lua
@@ -8,7 +8,7 @@ function source.new(config)
 end
 
 function source:is_available()
-  return vim.bo.filetype == "codecompanion" and self.config.display.chat.show_settings
+  return vim.bo.filetype == "markdown" and vim.b.codecompanion and self.config.display.chat.show_settings
 end
 
 source.get_position_encoding_kind = function()
diff --git a/lua/cmp_codecompanion/slash_commands.lua b/lua/cmp_codecompanion/slash_commands.lua
index f3608a3..efc1e57 100644
--- a/lua/cmp_codecompanion/slash_commands.lua
+++ b/lua/cmp_codecompanion/slash_commands.lua
@@ -9,7 +9,7 @@ function source.new(config)
 end
 
 function source:is_available()
-  return vim.bo.filetype == "codecompanion"
+  return vim.bo.filetype == "markdown" and vim.b.codecompanion
 end
 
 function source:get_trigger_characters()
diff --git a/lua/cmp_codecompanion/tools.lua b/lua/cmp_codecompanion/tools.lua
index d793224..6c20bb6 100644
--- a/lua/cmp_codecompanion/tools.lua
+++ b/lua/cmp_codecompanion/tools.lua
@@ -5,7 +5,7 @@ function source.new(config)
 end
 
 function source:is_available()
-  return vim.bo.filetype == "codecompanion"
+  return vim.bo.filetype == "markdown" and vim.b.codecompanion
 end
 
 source.get_position_encoding_kind = function()
diff --git a/lua/cmp_codecompanion/variables.lua b/lua/cmp_codecompanion/variables.lua
index fdc2cb7..1634ceb 100644
--- a/lua/cmp_codecompanion/variables.lua
+++ b/lua/cmp_codecompanion/variables.lua
@@ -5,7 +5,7 @@ function source.new()
 end
 
 function source:is_available()
-  return vim.bo.filetype == "codecompanion"
+  return vim.bo.filetype == "markdown" and vim.b.codecompanion
 end
 
 source.get_position_encoding_kind = function()
diff --git a/lua/codecompanion/init.lua b/lua/codecompanion/init.lua
index 87f1252..b84674b 100644
--- a/lua/codecompanion/init.lua
+++ b/lua/codecompanion/init.lua
@@ -265,26 +265,31 @@ M.setup = function(opts)
   local group = "codecompanion.syntax"
   api.nvim_create_augroup(group, { clear = true })
   api.nvim_create_autocmd("FileType", {
-    pattern = "codecompanion",
+    pattern = "markdown",
     group = group,
-    callback = vim.schedule_wrap(function()
-      vim.iter(config.strategies.chat.variables):each(function(name, var)
-        vim.cmd.syntax('match CodeCompanionChatVariable "#' .. name .. '"')
-        if var.opts and var.opts.has_params then
-          vim.cmd.syntax('match CodeCompanionChatVariable "#' .. name .. ':\\d\\+-\\?\\d\\+"')
-        end
-      end)
-      vim.iter(config.strategies.agent.tools):each(function(name, _)
-        vim.cmd.syntax('match CodeCompanionChatTool "@' .. name .. '"')
-      end)
-      vim
-        .iter(config.strategies.agent)
-        :filter(function(name)
-          return name ~= "tools"
+    callback = vim.schedule_wrap(function(info)
+      if not api.nvim_buf_is_valid(info.buf) or not vim.b[info.buf].codecompanion then
+        return
+      end
+      api.nvim_buf_call(info.buf, function()
+        vim.iter(config.strategies.chat.variables):each(function(name, var)
+          vim.cmd.syntax('match CodeCompanionChatVariable "#' .. name .. '"')
+          if var.opts and var.opts.has_params then
+            vim.cmd.syntax('match CodeCompanionChatVariable "#' .. name .. ':\\d\\+-\\?\\d\\+"')
+          end
         end)
-        :each(function(name, _)
-          vim.cmd.syntax('match CodeCompanionChatAgent "@' .. name .. '"')
+        vim.iter(config.strategies.agent.tools):each(function(name, _)
+          vim.cmd.syntax('match CodeCompanionChatTool "@' .. name .. '"')
         end)
+        vim
+          .iter(config.strategies.agent)
+          :filter(function(name)
+            return name ~= "tools"
+          end)
+          :each(function(name, _)
+            vim.cmd.syntax('match CodeCompanionChatAgent "@' .. name .. '"')
+          end)
+      end)
     end),
   })
 
@@ -328,26 +333,35 @@ M.setup = function(opts)
     cmp.register_source("codecompanion_slash_commands", require("cmp_codecompanion.slash_commands").new(config))
     cmp.register_source("codecompanion_tools", require("cmp_codecompanion.tools").new(config))
     cmp.register_source("codecompanion_variables", require("cmp_codecompanion.variables").new())
-    cmp.setup.filetype("codecompanion", {
+    cmp.setup.filetype("markdown", {
       enabled = true,
-      sources = {
-        { name = "codecompanion_models" },
-        { name = "codecompanion_slash_commands" },
+      sources = vim.list_extend({
         { name = "codecompanion_tools" },
         { name = "codecompanion_variables" },
-      },
+        { name = "codecompanion_slash_commands" },
+        { name = "codecompanion_models" },
+      }, cmp.get_config().sources),
     })
   end
 
   -- Capture the last terminal buffer
   _G.codecompanion_last_terminal = nil
+
+  ---Check if given buffer is a terminal buffer
+  ---and set `_G.codecompanion_last_terminal` if it is
+  ---@param buf number? when nil, the current buffer is used
+  local function check_terminal(buf)
+    local buf = buf ~= 0 and buf or api.nvim_get_current_buf()
+    if vim.api.nvim_buf_is_valid(buf) and vim.bo[buf].buftype == "terminal" then
+      _G.codecompanion_last_terminal = buf
+    end
+  end
+
+  check_terminal()
   api.nvim_create_autocmd("TermEnter", {
     desc = "Capture the last terminal buffer",
-    callback = function()
-      local bufnr = api.nvim_get_current_buf()
-      if vim.bo[bufnr].buftype == "terminal" then
-        _G.codecompanion_last_terminal = bufnr
-      end
+    callback = function(info)
+      check_terminal(info.buf)
     end,
   })
 
diff --git a/lua/codecompanion/keymaps.lua b/lua/codecompanion/keymaps.lua
index 7ad7f46..d8ffeb6 100644
--- a/lua/codecompanion/keymaps.lua
+++ b/lua/codecompanion/keymaps.lua
@@ -33,7 +33,8 @@ local function open_float(lines, opts)
   local height = window.height > 1 and window.height or opts.height or 17
 
   local bufnr = api.nvim_create_buf(false, true)
-  util.set_option(bufnr, "filetype", opts.filetype or "codecompanion")
+  vim.b[bufnr].codecompanion = true
+  util.set_option(bufnr, "filetype", opts.filetype or "markdown")
   local winnr = api.nvim_open_win(bufnr, true, {
     relative = opts.relative or "cursor",
     border = "single",
diff --git a/lua/codecompanion/strategies/chat/init.lua b/lua/codecompanion/strategies/chat/init.lua
index 5f2e461..5f04d2d 100644
--- a/lua/codecompanion/strategies/chat/init.lua
+++ b/lua/codecompanion/strategies/chat/init.lua
@@ -228,7 +228,8 @@ function Chat.new(args)
     create_buf = function()
       local bufnr = api.nvim_create_buf(false, true)
       api.nvim_buf_set_name(bufnr, string.format("[CodeCompanion] %d", id))
-      vim.bo[bufnr].filetype = "codecompanion"
+      vim.b[bufnr].codecompanion = true
+      vim.bo[bufnr].filetype = "markdown"
 
       return bufnr
     end,
diff --git a/lua/codecompanion/strategies/chat/references.lua b/lua/codecompanion/strategies/chat/references.lua
index 5c2144f..fa232b7 100644
--- a/lua/codecompanion/strategies/chat/references.lua
+++ b/lua/codecompanion/strategies/chat/references.lua
@@ -69,7 +69,7 @@ end
 local function add(chat, ref, row)
   local lines = {}
 
-  table.insert(lines, string.format("> - %s", ref.id))
+  table.insert(lines, string.format("> %s", ref.id))
 
   if vim.tbl_count(chat.refs) == 1 then
     table.insert(lines, 1, "> Sharing:")
@@ -194,7 +194,7 @@ function References:render()
     table.insert(lines, "> Sharing:")
 
     for _, ref in ipairs(self.chat.refs) do
-      table.insert(lines, string.format("> - %s", ref.id))
+      table.insert(lines, string.format("> %s", ref.id))
     end
     table.insert(lines, "")
 
diff --git a/lua/codecompanion/strategies/chat/ui.lua b/lua/codecompanion/strategies/chat/ui.lua
index be99b69..eb946cd 100644
--- a/lua/codecompanion/strategies/chat/ui.lua
+++ b/lua/codecompanion/strategies/chat/ui.lua
@@ -351,7 +351,7 @@ function UI:display_tokens()
   end
 end
 
----Fold code under the user's heading in the chat buffer
+---Fold current code under the user's heading in the chat buffer
 ---@return self
 function UI:fold_code()
   local query = vim.treesitter.query.parse(
@@ -373,10 +373,11 @@ function UI:fold_code()
 
   local parser = vim.treesitter.get_parser(self.bufnr, "markdown")
   local tree = parser:parse()[1]
+  local cursor_row = api.nvim_win_get_cursor(0)[1]
   vim.o.foldmethod = "manual"
 
   local role
-  for _, matches in query:iter_matches(tree:root(), self.bufnr, nil, nil, { all = false }) do
+  for _, matches in query:iter_matches(tree:root(), self.bufnr, nil, cursor_row, { all = false }) do
     local match = {}
     for id, node in pairs(matches) do
       match = vim.tbl_extend("keep", match, {
@@ -390,9 +391,10 @@ function UI:fold_code()
       role = vim.trim(vim.treesitter.get_node_text(match.role.node, self.bufnr))
       if role:match(self.roles.user) and match.code then
         local start_row, _, end_row, _ = match.code.node:range()
-        if start_row < end_row then
+        if start_row < end_row and start_row <= cursor_row and end_row >= cursor_row then
           api.nvim_buf_call(self.bufnr, function()
             vim.cmd(string.format("%d,%dfold", start_row, end_row))
+            return self
           end)
         end
       end
diff --git a/lua/codecompanion/utils/buffers.lua b/lua/codecompanion/utils/buffers.lua
index 108034f..063fc56 100644
--- a/lua/codecompanion/utils/buffers.lua
+++ b/lua/codecompanion/utils/buffers.lua
@@ -11,7 +11,7 @@ function M.get_visible_lines()
   for _, win in ipairs(wins) do
     local bufnr = vim.api.nvim_win_get_buf(win)
 
-    if vim.api.nvim_get_option_value("filetype", { buf = bufnr }) ~= "codecompanion" then
+    if vim.api.nvim_get_option_value("filetype", { buf = bufnr }) ~= "markdown" or not vim.bo[bufnr].codecompanion then
       local start_line = vim.api.nvim_win_call(win, function()
         return vim.fn.line("w0")
       end)
diff --git a/lua/legendary/extensions/codecompanion.lua b/lua/legendary/extensions/codecompanion.lua
index b96ff09..939739b 100644
--- a/lua/legendary/extensions/codecompanion.lua
+++ b/lua/legendary/extensions/codecompanion.lua
@@ -4,7 +4,11 @@ local function to_legendary_keymap(key, keymap)
     -- prefix makes it easier to search in legendary.nvim window
     desc = string.format("CodeCompanion: %s", require("legendary.util").get_desc(keymap)),
     -- keymaps are all for the chat buffer
-    filters = { filetype = "codecompanion" },
+    filters = {
+      function(_, context)
+        return context.buf and vim.api.nvim_buf_is_valid(context.buf) and vim.b[context.buf].codecompanion
+      end,
+    },
   }
 end
 
