diff --git a/lua/codecompanion/init.lua b/lua/codecompanion/init.lua
index 87f1252..38ed471 100644
--- a/lua/codecompanion/init.lua
+++ b/lua/codecompanion/init.lua
@@ -328,26 +328,35 @@ M.setup = function(opts)
     cmp.register_source("codecompanion_slash_commands", require("cmp_codecompanion.slash_commands").new(config))
     cmp.register_source("codecompanion_tools", require("cmp_codecompanion.tools").new(config))
     cmp.register_source("codecompanion_variables", require("cmp_codecompanion.variables").new())
-    cmp.setup.filetype("codecompanion", {
+    cmp.setup.filetype("markdown", {
       enabled = true,
-      sources = {
-        { name = "codecompanion_models" },
-        { name = "codecompanion_slash_commands" },
+      sources = vim.list_extend({
         { name = "codecompanion_tools" },
         { name = "codecompanion_variables" },
-      },
+        { name = "codecompanion_slash_commands" },
+        { name = "codecompanion_models" },
+      }, cmp.get_config().sources),
     })
   end
 
   -- Capture the last terminal buffer
   _G.codecompanion_last_terminal = nil
+
+  ---Check if given buffer is a terminal buffer
+  ---and set `_G.codecompanion_last_terminal` if it is
+  ---@param buf number? when nil, the current buffer is used
+  local function check_terminal(buf)
+    local buf = buf ~= 0 and buf or api.nvim_get_current_buf()
+    if vim.api.nvim_buf_is_valid(buf) and vim.bo[buf].buftype == "terminal" then
+      _G.codecompanion_last_terminal = buf
+    end
+  end
+
+  check_terminal()
   api.nvim_create_autocmd("TermEnter", {
     desc = "Capture the last terminal buffer",
-    callback = function()
-      local bufnr = api.nvim_get_current_buf()
-      if vim.bo[bufnr].buftype == "terminal" then
-        _G.codecompanion_last_terminal = bufnr
-      end
+    callback = function(info)
+      check_terminal(info.buf)
     end,
   })
 
diff --git a/lua/codecompanion/strategies/chat.lua b/lua/codecompanion/strategies/chat.lua
index 72e0f30..cfd1990 100644
--- a/lua/codecompanion/strategies/chat.lua
+++ b/lua/codecompanion/strategies/chat.lua
@@ -860,7 +860,7 @@ function Chat:unsubscribe(id)
   end
 end
 
----Fold code under the user's heading in the chat buffer
+---Fold current code under the user's heading in the chat buffer
 ---@return CodeCompanion.Chat.UI
 function Chat:fold_code()
   return self.ui:fold_code()
diff --git a/lua/codecompanion/strategies/chat/ui.lua b/lua/codecompanion/strategies/chat/ui.lua
index be99b69..eb946cd 100644
--- a/lua/codecompanion/strategies/chat/ui.lua
+++ b/lua/codecompanion/strategies/chat/ui.lua
@@ -351,7 +351,7 @@ function UI:display_tokens()
   end
 end
 
----Fold code under the user's heading in the chat buffer
+---Fold current code under the user's heading in the chat buffer
 ---@return self
 function UI:fold_code()
   local query = vim.treesitter.query.parse(
@@ -373,10 +373,11 @@ function UI:fold_code()
 
   local parser = vim.treesitter.get_parser(self.bufnr, "markdown")
   local tree = parser:parse()[1]
+  local cursor_row = api.nvim_win_get_cursor(0)[1]
   vim.o.foldmethod = "manual"
 
   local role
-  for _, matches in query:iter_matches(tree:root(), self.bufnr, nil, nil, { all = false }) do
+  for _, matches in query:iter_matches(tree:root(), self.bufnr, nil, cursor_row, { all = false }) do
     local match = {}
     for id, node in pairs(matches) do
       match = vim.tbl_extend("keep", match, {
@@ -390,9 +391,10 @@ function UI:fold_code()
       role = vim.trim(vim.treesitter.get_node_text(match.role.node, self.bufnr))
       if role:match(self.roles.user) and match.code then
         local start_row, _, end_row, _ = match.code.node:range()
-        if start_row < end_row then
+        if start_row < end_row and start_row <= cursor_row and end_row >= cursor_row then
           api.nvim_buf_call(self.bufnr, function()
             vim.cmd(string.format("%d,%dfold", start_row, end_row))
+            return self
           end)
         end
       end
