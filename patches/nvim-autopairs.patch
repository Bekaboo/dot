diff --git a/lua/nvim-autopairs.lua b/lua/nvim-autopairs.lua
index cb7912c..efd6cbd 100644
--- a/lua/nvim-autopairs.lua
+++ b/lua/nvim-autopairs.lua
@@ -473,7 +473,8 @@ M.autopairs_map = function(bufnr, char)
             end
         end
     end
-    return M.autopairs_afterquote(new_text, utils.esc(char))
+    return (M.config.enable_abbr and utils.esc(utils.key.abbr) or "")
+        .. M.autopairs_afterquote(new_text, utils.esc(char))
 end
 
 M.autopairs_insert = function(bufnr, char)
diff --git a/lua/nvim-autopairs/ts-conds.lua b/lua/nvim-autopairs/ts-conds.lua
index dd963c5..8985aa1 100644
--- a/lua/nvim-autopairs/ts-conds.lua
+++ b/lua/nvim-autopairs/ts-conds.lua
@@ -17,7 +17,11 @@ conds.is_endwise_node = function(nodes)
         if nodes == nil then return true end
         if #nodes == 0 then return true end
 
-        parsers.get_parser():parse()
+        local parser = parsers.get_parser()
+        if not parser then
+            return
+        end
+        parser:parse()
         local target = ts_utils.get_node_at_cursor()
         if target ~= nil and utils.is_in_table(nodes, target:type()) then
             local text = ts_get_node_text(target) or {""}
@@ -110,7 +114,11 @@ conds.is_ts_node = function(nodes)
         log.debug('is_ts_node')
         if #nodes == 0 then return  end
 
-        parsers.get_parser():parse()
+        local parser = parsers.get_parser()
+        if not parser then
+            return
+        end
+        parser:parse()
         local target = ts_utils.get_node_at_cursor()
         if target ~= nil and utils.is_in_table(nodes, target:type()) then
             return true
@@ -126,7 +134,11 @@ conds.is_not_ts_node = function(nodes)
         log.debug('is_not_ts_node')
         if #nodes == 0 then return  end
 
-        parsers.get_parser():parse()
+        local parser = parsers.get_parser()
+        if not parser then
+            return
+        end
+        parser:parse()
         local target = ts_utils.get_node_at_cursor()
         if target ~= nil and utils.is_in_table(nodes, target:type()) then
             return false
@@ -139,7 +151,11 @@ conds.is_not_ts_node_comment = function()
         log.debug('not_in_ts_node_comment')
         if not opts.ts_node then return end
 
-        parsers.get_parser():parse()
+        local parser = parsers.get_parser()
+        if not parser then
+            return
+        end
+        parser:parse()
         local target = ts_utils.get_node_at_cursor()
         if target ~= nil and utils.is_in_table(opts.ts_node, target:type()) then
             return false
