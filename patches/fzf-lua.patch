diff --git a/lua/fzf-lua/core.lua b/lua/fzf-lua/core.lua
index d570276..7eb850c 100644
--- a/lua/fzf-lua/core.lua
+++ b/lua/fzf-lua/core.lua
@@ -10,7 +10,7 @@ local make_entry = require "fzf-lua.make_entry"
 
 local M = {}
 
-local ACTION_DEFINITIONS = {
+M.ACTION_DEFINITIONS = {
   -- list of supported actions with labels to be displayed in the headers
   -- no pos implies an append to header array
   [actions.toggle_ignore]     = { "Disable .gitignore", fn_reload = "Respect .gitignore" },
@@ -748,7 +748,7 @@ M.set_header = function(opts, hdr_tbl)
       hdr_txt_str = "",
       val = function()
         if opts.no_header_i then return end
-        local defs = ACTION_DEFINITIONS
+        local defs = M.ACTION_DEFINITIONS
         local ret = {}
         for k, v in pairs(opts.actions) do
           local action = type(v) == "function" and v or type(v) == "table" and (v.fn or v[1])
@@ -768,7 +768,7 @@ M.set_header = function(opts, hdr_tbl)
             table.insert(t, i)
           end
           t[1] = (opts.header_prefix or ":: ") .. t[1]
-          return table.concat(t, opts.header_separator or "")
+          return table.concat(t, opts.header_separator or "|")
         end)() or nil
       end,
     },
diff --git a/lua/fzf-lua/defaults.lua b/lua/fzf-lua/defaults.lua
index c279959..454973f 100644
--- a/lua/fzf-lua/defaults.lua
+++ b/lua/fzf-lua/defaults.lua
@@ -424,6 +424,7 @@ M.defaults.buffers = {
   ignore_current_buffer = false,
   no_action_set_cursor  = true,
   cwd_only              = false,
+  ls_cmd                = nil,
   cwd                   = nil,
   fzf_opts              = { ["--tiebreak"] = "index", },
   _actions              = function() return M.globals.actions.buffers end,
diff --git a/lua/fzf-lua/providers/buffers.lua b/lua/fzf-lua/providers/buffers.lua
index 4f2ec5f..81cef4e 100644
--- a/lua/fzf-lua/providers/buffers.lua
+++ b/lua/fzf-lua/providers/buffers.lua
@@ -59,8 +59,10 @@ end
 local populate_buffer_entries = function(opts, bufnrs, tabh)
   local buffers = {}
   for _, bufnr in ipairs(bufnrs) do
-    local flag = (bufnr == core.CTX().bufnr and "%")
-        or (bufnr == core.CTX().alt_bufnr and "#") or " "
+    local flag = (opts.buf_flags and opts.buf_flags[bufnr])
+        or (bufnr == core.CTX().bufnr and "%")
+        or (bufnr == core.CTX().alt_bufnr and "#")
+        or " "
 
     local element = {
       bufnr = bufnr,
@@ -94,9 +96,9 @@ local populate_buffer_entries = function(opts, bufnrs, tabh)
     -- DON'T FORCE ME TO UPDATE THIS HACK NEOVIM LOL
     local future = os.time({ year = 2100, month = 1, day = 1, hour = 0, minute = 00 })
     local get_unixtime = function(buf)
-      if buf.flag == "%" then
+      if buf.flag:match("%%") then
         return future
-      elseif buf.flag == "#" then
+      elseif buf.flag:match("#") then
         return future - 1
       else
         return buf.info.lastused
@@ -111,11 +113,10 @@ end
 
 
 local function gen_buffer_entry(opts, buf, max_bufnr, cwd)
-  -- local hidden = buf.info.hidden == 1 and 'h' or 'a'
-  local hidden = ""
-  local readonly = buf.readonly and "=" or " "
-  local changed = buf.info.changed == 1 and "+" or " "
-  local flags = hidden .. readonly .. changed
+  -- if opts.buf_flags is set, buf.flag already includes all the flag
+  -- we need, so don't add extra flags here
+  local flags = opts.buf_flags and ""
+      or ((buf.readonly and "=" or " ") .. (buf.info.changed == 1 and "+" or " "))
   local leftbr = "["
   local rightbr = "]"
   local bufname = #buf.info.name > 0 and path.relative(buf.info.name, cwd or vim.loop.cwd())
@@ -129,15 +130,13 @@ local function gen_buffer_entry(opts, buf, max_bufnr, cwd)
   end
   -- add line number
   bufname = ("%s:%s"):format(bufname, buf.info.lnum > 0 and buf.info.lnum or "")
-  if buf.flag == "%" then
+  if buf.flag:match("%%") then
     flags = utils.ansi_codes[opts.hls.buf_flag_cur](buf.flag) .. flags
-  elseif buf.flag == "#" then
+  elseif buf.flag:match("#") then
     flags = utils.ansi_codes[opts.hls.buf_flag_alt](buf.flag) .. flags
   else
-    flags = utils.nbsp .. flags
+    flags = buf.flag .. flags
   end
-  local bufnrstr = string.format("%s%s%s", leftbr,
-    utils.ansi_codes[opts.hls.buf_nr](tostring(buf.bufnr)), rightbr)
   local buficon = ""
   local hl = ""
   if opts.file_icons then
@@ -155,10 +154,15 @@ local function gen_buffer_entry(opts, buf, max_bufnr, cwd)
       buficon = fn(buficon)
     end
   end
-  local max_bufnr_w = 26 + #tostring(max_bufnr)
-  local item_str = string.format("%s%s%s%s%s%s%s%s",
+  local max_bufnr_w = #(leftbr .. max_bufnr .. rightbr)
+  local bufnr_str = leftbr .. buf.bufnr .. rightbr
+  local pad = math.max(0, max_bufnr_w - #bufnr_str)
+  local bufnr_str_ansi = leftbr ..
+      utils.ansi_codes[opts.hls.buf_nr](tostring(buf.bufnr)) .. rightbr .. string.rep(" ", pad)
+  local item_str = string.format(
+    "%s%s%s%s%s%s%s%s",
     utils._if(opts._prefix, opts._prefix, ""),
-    string.format("%-" .. tostring(max_bufnr_w) .. "s", bufnrstr),
+    bufnr_str_ansi,
     utils.nbsp,
     flags,
     utils.nbsp,
@@ -174,7 +178,26 @@ M.buffers = function(opts)
 
   opts.__fn_reload = opts.__fn_reload or function(_)
     return function(cb)
-      local filtered, _, max_bufnr = filter_buffers(opts, core.CTX().buflist)
+      local buflist = {}
+      if not opts.ls_cmd then
+        buflist = core.CTX().buflist
+      else -- use `:ls` output as buffer list
+        -- use buffer flags from `:ls` output instead of generating
+        -- new buffer flags in `populate_buffer_entries()`
+        opts.buf_flags = {}
+        local alt_win = vim.fn.win_getid(vim.fn.winnr("#"))
+        -- call ls command in alternate window to get correct buffer flags
+        -- for current and alternate buffers ('%' and '#')
+        local ls_output = vim.split(vim.api.nvim_win_call(alt_win, function()
+          return vim.fn.execute(opts.ls_cmd)
+        end), "\n", { trimempty = true })
+        for _, line in ipairs(ls_output) do
+          local bufnr = tonumber(line:match("^%s*(%d+)"))
+          table.insert(buflist, bufnr)
+          opts.buf_flags[bufnr] = line:match("^%s*%d+([^\"]*)")
+        end
+      end
+      local filtered, _, max_bufnr = filter_buffers(opts, buflist)
 
       if next(filtered) then
         local buffers = populate_buffer_entries(opts, filtered)
diff --git a/lua/fzf-lua/providers/nvim.lua b/lua/fzf-lua/providers/nvim.lua
index 67ab103..9996dcc 100644
--- a/lua/fzf-lua/providers/nvim.lua
+++ b/lua/fzf-lua/providers/nvim.lua
@@ -83,18 +83,11 @@ local history = function(opts, str)
   core.fzf_exec(entries, opts)
 end
 
-local arg_header = function(sel_key, edit_key, text)
-  sel_key = utils.ansi_codes.yellow(sel_key)
-  edit_key = utils.ansi_codes.yellow(edit_key)
-  return vim.fn.shellescape((":: %s to %s, %s to edit")
-    :format(sel_key, text, edit_key))
-end
-
 M.command_history = function(opts)
   opts = config.normalize_opts(opts, "command_history")
   if not opts then return end
-  if opts.fzf_opts["--header"] == nil then
-    opts.fzf_opts["--header"] = arg_header("<CR>", "<Ctrl-e>", "execute")
+  if opts.headers then
+    opts = core.set_header(opts, opts.headers)
   end
   history(opts, "cmd")
 end
@@ -102,8 +95,8 @@ end
 M.search_history = function(opts)
   opts = config.normalize_opts(opts, "search_history")
   if not opts then return end
-  if opts.fzf_opts["--header"] == nil then
-    opts.fzf_opts["--header"] = arg_header("<CR>", "<Ctrl-e>", "search")
+  if opts.headers then
+    opts = core.set_header(opts, opts.headers)
   end
   history(opts, "search")
 end
diff --git a/lua/fzf-lua/utils.lua b/lua/fzf-lua/utils.lua
index b9384ac..d6ef90a 100644
--- a/lua/fzf-lua/utils.lua
+++ b/lua/fzf-lua/utils.lua
@@ -445,6 +445,10 @@ end
 function M.hexcol_from_hl(hlgroup, what)
   if not hlgroup or not what then return end
   local hexcol = synIDattr(hlgroup, what)
+  -- some colorschemes set fg=fg/bg or bg=fg/bg
+  if hexcol == "fg" or hexcol == "bg" then
+    return ""
+  end
   if hexcol and not hexcol:match("^#") then
     -- try to acquire the color from the map
     -- some schemes don't capitalize first letter?
