diff --git a/lua/output_window.lua b/lua/output_window.lua
index bba9523..60c2336 100644
--- a/lua/output_window.lua
+++ b/lua/output_window.lua
@@ -8,7 +8,7 @@ M.calculate_window_position = function(buf_line)
   local win = vim.api.nvim_get_current_win()
   local pos = vim.fn.screenpos(win, buf_line, 0)
 
-  return pos.row
+  return pos.row + (vim.wo[win].winbar == '' and 1 or 0)
 end
 
 return M
diff --git a/rplugin/python3/molten/__init__.py b/rplugin/python3/molten/__init__.py
index dbade14..63e9810 100644
--- a/rplugin/python3/molten/__init__.py
+++ b/rplugin/python3/molten/__init__.py
@@ -163,6 +163,7 @@ class Molten:
             molten = self.molten_kernels.get(kernel_name)
             if molten is not None:
                 molten.add_nvim_buffer(self.nvim.current.buffer)
+                molten._doautocmd("MoltenInitPost")
                 self.buffers[self.nvim.current.buffer.number] = [molten]
                 return molten
 
diff --git a/rplugin/python3/molten/outputbuffer.py b/rplugin/python3/molten/outputbuffer.py
index ba241e8..63c67b9 100644
--- a/rplugin/python3/molten/outputbuffer.py
+++ b/rplugin/python3/molten/outputbuffer.py
@@ -42,6 +42,7 @@ class OutputBuffer:
         self.options = options
         self.nvim.exec_lua("_ow = require('output_window')")
         self.lua = self.nvim.lua._ow
+        self.source_ft = self.nvim.api.get_option_value("filetype", {})
 
     def _buffer_to_window_lineno(self, lineno: int) -> int:
         return self.lua.calculate_window_position(lineno)
@@ -79,7 +80,10 @@ class OutputBuffer:
             elif self.options.enter_output_behavior == "open_and_enter":
                 self.show_floating_win(anchor)
                 entered = True
-                self.nvim.funcs.nvim_set_current_win(self.display_win)
+                # FIXME: self.display_win is None when the source
+                # file is in the lower window of a horizontal split
+                if self.display_win:
+                    self.nvim.funcs.nvim_set_current_win(self.display_win)
         elif self.options.enter_output_behavior != "no_open":
             entered = True
             self.nvim.funcs.nvim_set_current_win(self.display_win)
@@ -176,7 +180,7 @@ class OutputBuffer:
         win_width = win.width
         win_height = win.height
 
-        if self.options.virt_lines_off_by_1:
+        if self.options.virt_lines_off_by_1 and self.source_ft == "markdown":
             win_row += 1
 
         shape = (
@@ -204,7 +208,9 @@ class OutputBuffer:
     def show_floating_win(self, anchor: Position) -> None:
         win = self.nvim.current.window
         win_col = win.col
-        win_row = self._buffer_to_window_lineno(anchor.lineno + 1)
+        win_row = self._buffer_to_window_lineno(anchor.lineno)
+        if self.options.virt_lines_off_by_1 and self.source_ft == "markdown":
+            win_row += 1
         if win_row == 0:  # anchor position is off screen
             return
         win_width = win.width
@@ -294,7 +300,10 @@ class OutputBuffer:
                     win_opts,
                 )
                 hl = self.options.hl
-                self.set_win_option("winhighlight", f"Normal:{hl.win},NormalNC:{hl.win_nc}")
+                self.set_win_option(
+                    "winhighlight",
+                    f"Normal:{hl.win},NormalNC:{hl.win_nc},FloatBorder:{hl.border_norm}",
+                )
                 # TODO: Refactor once MoltenOutputWindowOpen autocommand is a thing.
                 # note, the above setting will probably stay there, just so users can set highlights
                 # with their other highlights
