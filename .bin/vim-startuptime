#!/usr/bin/env bash
# vim: ft=sh ts=4 sw=4 sts=4 et :

usage() {
    echo "\
Usage: $(basename $0) [<vim_test_command>] [-h|--help]
       [-n|--num-epochs=<epochs>] [-p|--preserve-log]"
}

# test nvim startuptime
vim-startuptime() {
    local vim=$(command -v nvim || command -v vim || command -v vi)
    if [[ ! -x "$vim" ]]; then
        echo "vim-startuptime: vim not found" >&2
        return 1
    fi

    local logfile=$(printf '%s_%s.log' 'vim_startuptime' "$(date +'%Y-%m-%d_%T')")
    local preserve=0
    local epochs=100
    local vim_test_command=$vim
    for arg in "$@"; do
        case "$arg" in
        -h | --help)
            usage
            return 0
            ;;
        -n=* | --num-epochs=*)
            epochs="${arg#*=}"
            shift
            ;;
        -p | --preserve-log)
            preserve=1
            shift
            ;;
        *)
            vim_test_command="$arg"
            shift
            ;;
        esac
    done

    for _ in $(seq "$epochs"); do
        $vim_test_command --startuptime "$logfile" \
            +'call timer_start(0, {-> execute('\''qall!'\'')})' || return 1
    done

    if command -v awk >/dev/null 2>&1; then
        "$vim" "$logfile" \
            +'v/--- N\?VIM STARTED ---/d' \
            +'sort' \
            +$ \
            +'write!' \
            +'r!awk '\''{sum+=$1} END {print "\nMean: ", sum, "/", NR, "=", sum/NR}'\'' %'
    else
        "$vim" "$logfile" \
            +'v/--- N\?VIM STARTED ---/d' \
            +'sort'
    fi

    if [[ "$preserve" == 0 ]]; then
        rm "$logfile"
    fi

    return 0
}

vim-startuptime "$@"
