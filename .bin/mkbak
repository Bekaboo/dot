#!/usr/bin/env sh
# vim: ft=sh ts=4 sw=4 sts=4 et :
# Make a backup for a file or directory

print_help() {
    script_name=$(basename "$0")
    cat <<EOF
${script_name} - make backup
Usage: ${script_name} [options] <file>
       ${script_name} -R [options] <file.bak>

Options:
  -h, --help    Show this help message
  -m, --move    Use move instead of copy (both backup and restore)
  -R, --restore Restore from backup
EOF
}

# Remove trailing slashes from path
clean_path() {
    while [ "${1%/}" != "$1" ]; do
        set -- "${1%/}"
    done
    printf '%s\n' "$1"
}

backup() {
    src="$1"
    bak="$2"

    if [ ! -e "$src" ]; then
        echo "'$src' does not exist" >&2
        return 1
    fi
    if [ -e "$bak" ]; then
        echo "'$bak' already exists" >&2
        return 1
    fi

    if [ "$move_flag" -eq 1 ]; then
        if ! mv "$src" "$bak"; then
            echo "Failed to move '$src' to '$bak'" >&2
            return 1
        fi
    else
        if ! cp -LR "$src" "$bak"; then
            echo "Failed to create backup copy" >&2
            return 1
        fi
    fi
}

restore() {
    src_bak="$1"
    original="$2"

    if [ ! -e "$src_bak" ]; then
        echo "'$src_bak' does not exist" >&2
        return 1
    fi
    if [ -e "$original" ]; then
        echo "'$original' already exists" >&2
        return 1
    fi

    if [ "$move_flag" -eq 1 ]; then
        if ! mv "$src_bak" "$original"; then
            echo "Failed to restore by moving '$src_bak' to '$original'" >&2
            return 1
        fi
    else
        if ! cp -LR "$src_bak" "$original"; then
            echo "Failed to restore by copying '$src_bak' to '$original'" >&2
            return 1
        fi
    fi
}

main() {
    move_flag=0
    restore_flag=0

    while [ $# -gt 0 ]; do
        case "$1" in
        -m | --move)
            move_flag=1
            shift
            ;;
        -R | --restore)
            restore_flag=1
            shift
            ;;
        -h | --help)
            print_help
            return 0
            ;;
        *)
            break
            ;;
        esac
    done

    if [ $# -ne 1 ]; then
        echo "Error: Exactly one file argument required" >&2
        print_help
        return 1
    fi

    if [ "$restore_flag" -eq 1 ]; then
        src_bak="$1"
        if [ "${src_bak%.bak}" = "$src_bak" ]; then
            echo "Restore requires a .bak file" >&2
            return 1
        fi
        restore "$src_bak" "${src_bak%.bak}"
    else
        src="$1"
        bak="$(clean_path "$src").bak"
        backup "$src" "$bak"
    fi
}

main "$@"
