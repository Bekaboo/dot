#!/usr/bin/env bash
# vim: ft=sh ts=4 sw=4 sts=4 et :

has() {
    command -v "$1" >/dev/null 2>&1
}

if ! has fzf; then
    echo 'fzf not found' >&2
    return 1
fi

if ! has tput || ! has stty; then
    # tput or stty not found, use fzf directly
    fzf "$@"
    return
fi

readonly lines=$(tput lines)
readonly cols=$(tput cols)

# Source:
# https://stackoverflow.com/questions/2575037/how-to-get-the-cursor-position-in-bash
cursorpos() {
    # Based on a script from
    # http://invisible-island.net/xterm/xterm.faq.html
    exec </dev/tty
    oldstty=$(stty -g)
    stty raw -echo min 0
    echo -en "\033[6n" >/dev/tty
    IFS=';' read -r -d R -a pos
    stty $oldstty
    row=$((${pos[0]:2} - 1)) # Strip off the esc-[
    col=$((${pos[1]} - 1))
    echo "$row;$col"
}

# Normalize percentage to number
normalize-fzf-geometry() {
    # $1: number or percentage
    # $2: total
    [[ -z "$1" ]] && return
    [[ "$1" =~ %$ ]] &&
        echo $(($1 * $2 / 100)) ||
        echo "$1"
}

# Get fzf option value from $FZF_DEFAULT_OPTS environment variable,
# option name must be a long option name and option value must contain
# no space, if there are multiple values for the option, only the last one
# will be returned
get-fzf-long-opt-no-space() {
    # $1: long option name
    # $2: default value of the option if not set
    if ! has grep; then
        echo "$2"
        return 1
    fi

    local opt_val=$(echo "$FZF_DEFAULT_OPTS" |
        grep -oP "$(printf '(--%s(=(\s|\S*)|\s*\S*))' "$1")" |
        tail -n1 |
        sed "$(printf 's/^--%s=\\?//' "$1")" |
        sed 's/\s*//g' |
        sed "s/^[\"']|[\"']\$//g")
    [[ -z "$opt_val" ]] &&
        echo "$2" ||
        echo "$opt_val"
}

# Get fzf margin or padding from $FZF_DEFAULT_OPTS environment variable fzf
# exports $FZF_PREVIEW_{COLUMNS,LINES} so that previewer can adjust its size
# accordingly but information about padding and margin is not provided, so we
# have to calculate it according to $FZF_DEFAULT_OPTS, this is not ideal since
# it won't work if user overrides the preview window settings in $@
get-fzf-geometry-normalized() {
    # $1: 'margin' or 'padding'
    # $2: 'top', 'bottom', 'left', or 'right'
    local geometry=$(get-fzf-long-opt-no-space "$1" 0)
    if [[ "$?" -ne 0 ]]; then
        echo "$geometry"
        return 1
    fi

    [[ "$2" = 'top' || "$2" = 'bottom' ]] &&
        local total="$lines" ||
        local total="$cols"

    # same margin/padding for all sides
    if [[ "$geometry" =~ ^[0-9]+%?$ ]]; then
        echo $(normalize-fzf-geometry "$geometry" "$total")
        return
    fi
    # vertical,horizontal margin/padding
    if [[ "$geometry" =~ ^[0-9]+%?,[0-9]%?$ ]]; then
        [[ "$2" = 'top' || "$2" = 'bottom' ]] &&
            local value="${geometry%%,*}" ||
            local value="${geometry##*,}"
        echo $(normalize-fzf-geometry "$value" "$total")
        return
    fi
    # top,horizontal,bottom margin/padding
    if [[ "$geometry" =~ ^[0-9]+%?,[0-9]+%?,[0-9]%?$ ]]; then
        local select_field
        case "$2" in
        top) select_field=1 ;;
        bottom) select_field=3 ;;
        left | right) select_field=2 ;;
        esac
        echo $(normalize-fzf-geometry \
            "$(echo "$geometry" | cut -d, -f $select_field)" "$total")
        return
    fi
    # top,right,bottom,left margin/padding
    if [[ "$geometry" =~ ^[0-9]+%?,[0-9]+%?,[0-9]%?,[0-9]+%?$ ]]; then
        local select_field
        case "$2" in
        top) select_field=1 ;;
        right) select_field=2 ;;
        bottom) select_field=3 ;;
        left) select_field=4 ;;
        esac
        echo $(normalize-fzf-geometry \
            "$(echo "$geometry" | cut -d, -f $select_field)" "$total")
        return
    fi

    echo 0
    return 1 # Should not reach here
}

readonly -A fzf_margin=(
    [top]=$(get-fzf-geometry-normalized margin top)
    [right]=$(get-fzf-geometry-normalized margin right)
    [bottom]=$(get-fzf-geometry-normalized margin bottom)
    [left]=$(get-fzf-geometry-normalized margin left)
)
readonly -A fzf_padding=(
    [top]=$(get-fzf-geometry-normalized padding top)
    [right]=$(get-fzf-geometry-normalized padding right)
    [bottom]=$(get-fzf-geometry-normalized padding bottom)
    [left]=$(get-fzf-geometry-normalized padding left)
)

main() {
    local opts

    # Adaptive height
    local cursor=$(cursorpos) # line;column
    local fzf_height=$(($lines - ${cursor%%;*} - 1))
    local fzf_min_height_default=$(get-fzf-long-opt-no-space \
        min-height 10)
    (($fzf_height < $fzf_min_height_default)) &&
        fzf_height=$fzf_min_height_default
    (($fzf_height > $lines)) && fzf_height=$lines
    opts+="--height=$fzf_height "

    # Flexible preview window layout
    local preview_window_orientation
    local preview_disabled='false'
    # Disable preview window if the fzf inner window is too small,
    # use horizontal layout if it is wide, or vertical layout if
    # it is tall
    local fzf_inner_height=$(($fzf_height - \
        ${fzf_margin[bottom]} - \
        ${fzf_margin[top]} - \
        ${fzf_padding[bottom]} - \
        ${fzf_padding[top]}))
    local fzf_inner_width=$(($cols - \
        ${fzf_margin[left]} - \
        ${fzf_margin[right]} - \
        ${fzf_padding[left]} - \
        ${fzf_padding[right]}))

    fzf_inner_height=$(($fzf_inner_height >= 1 ? $fzf_inner_height : 1))
    fzf_inner_width=$(($fzf_inner_width >= 1 ? $fzf_inner_width : 1))

    if ((fzf_inner_height > 16)) || ((fzf_inner_width > 48)); then
        ((fzf_inner_width > fzf_inner_height * 3)) &&
            preview_window_orientation='right' ||
            preview_window_orientation='down'
        opts+="--preview-window=$preview_window_orientation "
    else
        opts+='--no-preview '
        preview_disabled='true'
    fi

    # Launch ueberzugpp for image preview if we did not
    # disable preview in the previous step, notice that
    # this does not necessarily mean that preview is enabled
    # (which eventually depends on $FZF_DEFAULT_OPTS and arguments
    # passed to fzf via $@), it only ensures that ueberzugpp is up
    # when we need it
    if has ueberzugpp &&
        [[ "$FZF_PREVIEW_DISABLE_UB" != 'true' &&
            "$preview_disabled" = 'false' ]]; then
        local ub_pid_file="/tmp/.$(uuidgen)"
        # HACK: need to redirect stdout and stderr to /dev/null, else
        # ctrl-r history search will be messed up
        ueberzugpp layer \
            --silent \
            --no-stdin \
            --use-escape-codes \
            --pid-file "$ub_pid_file" >/dev/null 2>&1
        # ueberzugpp will listen to this socket
        export UB_SOCK="/tmp/ueberzugpp-$(cat "$ub_pid_file").socket"
        # Export additional geometry information for the previewer
        # to adjust the position of the image shown by ueberzugpp
        export FZF_PREVIEW_ORIENTATION="$preview_window_orientation"
        export FZF_HEIGHT="$fzf_height"
        export FZF_MARGIN_TOP="${fzf_margin[top]}"
        export FZF_MARGIN_RIGHT="${fzf_margin[right]}"
        export FZF_MARGIN_BOTTOM="${fzf_margin[bottom]}"
        export FZF_MARGIN_LEFT="${fzf_margin[left]}"
        export FZF_PADDING_TOP="${fzf_padding[top]}"
        export FZF_PADDING_RIGHT="${fzf_padding[right]}"
        export FZF_PADDING_BOTTOM="${fzf_padding[bottom]}"
        export FZF_PADDING_LEFT="${fzf_padding[left]}"
        # fzf overrides $LINES and $COLUMNS according to the to preview window
        # size, we need to override them back to the original values so that
        # ueberzugpp can calculate the correct position of the image
        export FZF_TERM_LINES="$lines"
        export FZF_TERM_COLUMNS="$cols"
    fi

    FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $opts" fzf "$@"

    # Close ueberzugpp after fzf exits
    [[ -n "$UB_SOCK" ]] && ueberzugpp cmd -s "$UB_SOCK" -a exit &
    [[ -e "$ub_pid_file" ]] && rm -f "$ub_pid_file" &
}

main "$@"
