#!/usr/bin/env bash
# vim: ft=sh ts=4 sw=4 sts=4 et :

CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

get-theme-variant() {
    # $1: name of the old theme
    # $2: 'light' or 'dark'
    echo "$1" | sed "s/dark\|light/$2/" | sed "s/Dark\|Light/${2^}/"
}

setbg-alacritty() {
    # $1: 'light' or 'dark'
    local config_dir="$CONFIG_HOME/alacritty"
    local config="$config_dir/alacritty.yml"
    local theme_path="$config_dir/theme.yml"
    local themes_dir="$config_dir/themes"
    # If $1 is empty, only need to ensure symlink to color theme file exists
    [[ -z "$1" ]] &&
        ensure-slink "$themes_dir/dark.yml" "$theme_path" ||
        force-slink "$themes_dir/$1.yml" "$theme_path"
    [[ -e "$config" ]] && touch "$config" # Reload config
}

setbg-kitty() {
    # $1: 'light' or 'dark'
    local config_dir="$CONFIG_HOME/kitty"
    local theme_path="$config_dir/current-theme.conf"
    local themes_dir="$config_dir/themes"
    if [[ -z $1 ]]; then
        ensure-slink "$themes_dir/dark.conf" "$theme_path"
    else
        force-slink "$themes_dir/$1.conf" "$theme_path"
    fi
    if [[ -n "$(command -v kitty 2>/dev/null)" ]]; then
        for pid in $(pgrep kitty); do
            kill -SIGUSR1 $pid
        done
    fi
}

setbg-wezterm() {
    # $1: 'light' or 'dark'
    local config_dir="$CONFIG_HOME/wezterm"
    local theme_path="$config_dir/theme.toml"
    local themes_dir="$config_dir/colors"
    # If $1 is empty, only need to ensure symlink to color theme file exists
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_dir/dark.toml" "$theme_path"
    else
        force-slink "$themes_dir/$1.toml" "$theme_path"
    fi
}

setbg-highlight() {
    # $1: 'light' or 'dark'
    local config_dir="$HOME/.highlight"
    local themes_dir="$config_dir/themes"
    local theme_path="$themes_dir/highlight.theme"
    # If $1 is empty, only need to ensure symlink to color theme file exists
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_dir/dark.theme" "$theme_path"
    else
        force-slink "$themes_dir/$1.theme" "$theme_path"
    fi
}

setbg-nvim() {
    # $1: 'light' or 'dark'
    # $2: comma-separated list of pids to exclude
    if [[ -z "$1" || -z "$(command -v nvim 2>/dev/null)" ]]; then
        return 1
    fi
    # Spawn an nvim instance to write the background to shada file
    nvim --headless --noplugin +"let g:BACKGROUND='$1'" +wshada +quit
    # List of pids to exclude from sending signal
    local excludes
    IFS=, read -r -a excludes <<<"$2"
    # Send signal to running nvim instances to change their background
    for pid in "$(pgrep nvim)"; do
        if [[ ! " ${excludes[*]} " =~ " ${pid} " ]]; then
            kill -USR1 $pid &>/dev/null
        fi
    done
}

setbg-plasma() {
    # $1: 'light' or 'dark'
    if [[ -z "$1" ]]; then
        return 1
    fi
    if [[ -n "$(command -v plasma-apply-desktoptheme 2>/dev/null)" ]]; then
        local current_theme=$(plasma-get-current-desktoptheme)
        local new_theme=$(get-theme-variant "$current_theme" "$1")
        if [[ "$current_theme" != "$new_theme" ]]; then
            plasma-apply-desktoptheme "$new_theme" &>/dev/null
        fi
    fi
    if [[ -n "$(command -v plasma-apply-colorscheme 2>/dev/null)" ]]; then
        local current_scheme=$(plasma-get-current-colorscheme)
        local new_scheme=$(get-theme-variant "$current_scheme" "$1")
        if [[ "$current_scheme" != "$new_scheme" ]]; then
            plasma-apply-colorscheme "$new_scheme" &>/dev/null
        fi
    fi
}

get-new-profile-name() {
    # $1: path to config file
    # $2: 'light' or 'dark'
    local current_profile=$(kreadconfig5 --file "$1" \
        --group 'Desktop Entry' --key 'DefaultProfile')
    local current_profile_name=${current_profile%\.profile}
    local new_profile_name=$(get-theme-variant "$current_profile_name" "$2")
    # If new profile name is empty, use default profile 'Nano Dark'
    [[ -z "$new_profile_name" ]] && new_profile_name='Nano Dark'
    echo "$new_profile_name"
}

konsole-switch-profile-bg() {
    # $1: name of the app
    # $2: 'light' or 'dark'
    if [[ -z "$(command -v kreadconfig5 2>/dev/null)" ||
    -z "$(command -v kwriteconfig5 2>/dev/null)" ]]; then
        return 1
    fi
    local rc="$CONFIG_HOME/${1}rc"
    local new_profile_name=$(get-new-profile-name "$rc" "$2")
    if [[ -e "$DATA_HOME/konsole/$new_profile_name.profile" ]]; then
        kwriteconfig5 --file "$rc" \
            --group 'Desktop Entry' \
            --key DefaultProfile "$new_profile_name.profile"
        qdbus-call-service-method "$1" setProfile "$new_profile_name"
    fi
}

setbg-konsole-yakuake() {
    # $1: 'light' or 'dark'
    if [[ -z "$1" || -z $(command -v kreadconfig5 2>/dev/null) ||
    -z $(command -v kwriteconfig5 2>/dev/null) ]]; then
        return 1
    fi
    konsole-switch-profile-bg konsole "$1"
    konsole-switch-profile-bg yakuake "$1"
    konsole-switch-profile-bg dolphin "$1"
    konsole-switch-profile-bg kate "$1"
}

setbg-okular() {
    # $1: 'light' or 'dark'
    if [[ -z "$1" || -z "$(command -v okular 2>/dev/null)" ||
    -z "$(command -v kwriteconfig5 2>/dev/null)" ]]; then
        return 1
    fi
    # Code adapted from https://gitlab.com/LADlSLAV/yabotss
    local changecolors=$([[ $1 == dark ]] && echo true || echo false)
    kwriteconfig5 --file "$CONFIG_HOME/okularpartrc" \
        --group Document \
        --key ChangeColors "$changecolors"
    qdbus-call-service-method okular slotSetChangeColors \
        "$changecolors"
}

setbg-vscode() {
    # $1: 'light' or 'dark'
    local rc="$CONFIG_HOME/Code/User/settings.json"
    if [[ -z "$1" || ! -e "$rc" ||
        -z "$(command -v jq 2>/dev/null)" ]]; then
        return 1
    fi
    local current_theme=$(jq -r '."workbench.colorTheme"' "$rc")
    local new_theme=$(get-theme-variant "$current_theme" "$1")
    [[ -z "$new_theme" ]] && new_theme=$([[ "$1" == dark ]] &&
        echo "$(jq -r '."workbench.preferredDarkColorTheme"' "$rc")" ||
        echo "$(jq -r '."workbench.preferredLightColorTheme"' "$rc")")
    if [[ -z "$new_theme" || "$new_theme" == null ]]; then
        new_theme=$(get-theme-variant "${theme:-'Default Dark Modern'}" "$1")
    fi
    if [[ "$theme" != "$new_theme" ]]; then
        local tmp=$(mktemp)
        jq ".\"workbench.colorTheme\" = \"$new_theme\"" "$rc" >"$tmp" &&
            mv "$tmp" "$rc"
    fi
}

setbg-fish() {
    # $1: 'light' or 'dark'
    local themes_dir="$CONFIG_HOME/fish/themes"
    local theme_path="$themes_dir/Current.theme"
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_dir/Dark.theme" "$theme_path"
    else
        force-slink "$themes_dir/${1^}.theme" "$theme_path"
    fi
    [[ -n "$(command -v fish 2>/dev/null)" ]] &&
        fish -c 'set -U __fish_reload_theme "$(head -c 16 /dev/urandom | base32)"'
}

setbg-glow() {
    # $1: 'light' or 'dark'
    local config="$CONFIG_HOME/glow/glow.yml"
    if [[ -z "$1" ]]; then
        return 1
    fi
    if [[ ! -e "$config" ]]; then
        mkdir -p "$(dirname "$config")"
        echo 'style: "dark"' >"$config"
    fi
    # style: "<style_name>"
    local theme=$(grep -Po '(?<=style: ")[^"]+' "$config")
    local new_theme=$(get-theme-variant "$theme" "$1")
    if [[ "$theme" != "$new_theme" ]]; then
        sed -i "s/style: \"$theme\"/style: \"$new_theme\"/" "$config"
    fi
}

usage() {
    echo 'Usage: setbg [light|dark] [--exclude-nvim-processes=<pid1>,<pid2>,...]'
    exit 1
}

main() {
    local bg=''
    local exclude_nvim_processes=''
    for arg in "$@"; do
        case "$arg" in
        light | dark)
            bg="$arg"
            shift
            ;;
        --exclude-nvim-processes=*)
            exclude_nvim_processes="${arg#*=}"
            shift
            ;;
        *)
            usage
            ;;
        esac
    done
    setbg-alacritty "$bg" &
    setbg-kitty "$bg" &
    setbg-wezterm "$bg" &
    setbg-konsole-yakuake "$bg" &
    setbg-highlight "$bg" &
    setbg-nvim "$bg" "$exclude_nvim_processes" &
    setbg-fish "$bg" &
    setbg-glow "$bg" &
    setbg-vscode "$bg" &
    setbg-plasma "$bg" &
    setbg-okular "$bg" &
    return 0
}

main "$@"
