#!/usr/bin/env bash
# vim: ft=sh ts=4 sw=4 sts=4 et :

CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

setbg-alacritty() {
    # $1: 'light' or 'dark'
    local theme_path="$CONFIG_HOME/alacritty/theme.yml"
    # If $1 is empty, only need to ensure symlink to color theme file exists
    if [[ -z "$1" ]]; then
        ensure-slink "$CONFIG_HOME/alacritty/themes/dark.yml" "$theme_path"
    else
        force-slink "$CONFIG_HOME/alacritty/themes/$1.yml" "$theme_path"
    fi
    touch "$CONFIG_HOME/alacritty/alacritty.yml" # Reload config
}

setbg-kitty() {
    # $1: 'light' or 'dark'
    local theme_path="$CONFIG_HOME/kitty/current-theme.conf"
    if [[ -z $1 ]]; then
        ensure-slink "$CONFIG_HOME/kitty/themes/dark.conf" "$theme_path"
    else
        force-slink "$CONFIG_HOME/kitty/themes/$1.conf" "$theme_path"
    fi
    if [[ -n "$(command -v kitty 2>/dev/null)" ]]; then
        for pid in $(pgrep kitty); do
            kill -SIGUSR1 $pid
        done
    fi
}

setbg-wezterm() {
    # $1: 'light' or 'dark'
    local theme_path="$CONFIG_HOME/wezterm/theme.toml"
    # If $1 is empty, only need to ensure symlink to color theme file exists
    if [[ -z "$1" ]]; then
        ensure-slink "$CONFIG_HOME/wezterm/colors/dark.toml" "$theme_path"
    else
        force-slink "$CONFIG_HOME/wezterm/colors/$1.toml" "$theme_path"
    fi
}

setbg-highlight() {
    # $1: 'light' or 'dark'
    local theme_path="$HOME/.highlight/themes/highlight.theme"
    # If $1 is empty, only need to ensure symlink to color theme file exists
    if [[ -z "$1" ]]; then
        ensure-slink "$HOME/.highlight/themes/dark.theme" "$theme_path"
    else
        force-slink "$HOME/.highlight/themes/$1.theme" "$theme_path"
    fi
}

setbg-nvim() {
    # $1: 'light' or 'dark'
    # $2: comma-separated list of pids to exclude
    if [[ -z "$1" || -z "$(command -v nvim 2>/dev/null)" ]]; then
        return 0
    fi
    # Spawn an nvim instance to write the background to shada file
    nvim --headless --noplugin +"let g:BACKGROUND='$1'" +wshada +quit
    # List of pids to exclude from sending signal
    local excludes
    IFS=, read -r -a excludes <<<"$2"
    # Send signal to running nvim instances to change their background
    for pid in "$(pgrep nvim)"; do
        if [[ ! " ${excludes[*]} " =~ " ${pid} " ]]; then
            kill -USR1 $pid &>/dev/null
        fi
    done
}

setbg-plasma() {
    if [[ -z "$1" ]]; then
        return 0
    fi
    # $1: 'light' or 'dark'
    if [[ -n "$(command -v plasma-apply-desktoptheme 2>/dev/null)" ]]; then
        local current_theme=$(plasma-get-current-desktoptheme)
        local new_theme=$(echo "$current_theme" | sed "s/dark$\|light$/$bg/")
        if [[ "$current_theme" != "$new_theme" ]]; then
            plasma-apply-desktoptheme "$new_theme" &>/dev/null
        fi
    fi
    if [[ -n "$(command -v plasma-apply-colorscheme 2>/dev/null)" ]]; then
        local current_scheme=$(plasma-get-current-colorscheme)
        local new_scheme=$(echo "$current_scheme" | \
            sed "s/Dark$\|Light$/${1^}/")
        if [[ "$current_scheme" != "$new_scheme" ]]; then
            plasma-apply-colorscheme "$new_scheme" &>/dev/null
        fi
    fi
}

usage() {
    echo 'Usage: setbg [light|dark] [--exclude-nvim-processes=<pid1>,<pid2>,...]'
    exit 1
}

main() {
    local bg=''
    local exclude_nvim_processes=''
    for arg in "$@"; do
        case "$arg" in
        light | dark)
            bg="$arg"
            shift
            ;;
        --exclude-nvim-processes=*)
            exclude_nvim_processes="${arg#*=}"
            shift
            ;;
        *)
            usage
            ;;
        esac
    done
    setbg-alacritty "$bg"
    setbg-kitty "$bg"
    setbg-wezterm "$bg"
    setbg-highlight "$bg"
    setbg-nvim "$bg" "$exclude_nvim_processes"
    setbg-plasma "$bg"
    return 0
}

main "$@"
