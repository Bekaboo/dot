#!/usr/bin/env bash
# vim: ft=sh ts=4 sw=4 sts=4 et :

CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
DEFAULT_COLOR='nano'

# Convert a color name to capital style
# gruvbox-material -> Gruvbox Material
get-cap-theme-name() {
    # $1: name of the fish theme
    if ! command -v awk &>/dev/null || ! command -v sed &>/dev/null; then
        return 1
    fi
    local theme_name=$(echo "$1" |
        sed 's/-/ /g' |
        awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1')
    echo "$theme_name"
}

setcolor-alacritty() {
    # $1: name of the colorscheme
    local themes_path="$CONFIG_HOME/alacritty/themes"
    local dark_theme_path="$themes_path/dark.yml"
    local light_theme_path="$themes_path/light.yml"
    # If $1 is empty, only need to ensure symlink to color theme files exists
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_path/$DEFAULT_COLOR-dark.yml" "$dark_theme_path"
        ensure-slink "$themes_path/$DEFAULT_COLOR-light.yml" "$light_theme_path"
    else
        force-slink "$themes_path/$1-dark.yml" "$dark_theme_path"
        force-slink "$themes_path/$1-light.yml" "$light_theme_path"
    fi
    local config="$CONFIG_HOME/alacritty/alacritty.yml"
    [[ -e "$config" ]] && touch "$config" # Reload config
}

setcolor-kitty() {
    # $1: name of the colorscheme
    local themes_path="$CONFIG_HOME/kitty/themes"
    local dark_theme_path="$themes_path/dark.conf"
    local light_theme_path="$themes_path/light.conf"
    # If $1 is empty, only need to ensure symlink to color theme files exists
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_path/$DEFAULT_COLOR-dark.conf" "$dark_theme_path"
        ensure-slink "$themes_path/$DEFAULT_COLOR-light.conf" "$light_theme_path"
    else
        force-slink "$themes_path/$1-dark.conf" "$dark_theme_path"
        force-slink "$themes_path/$1-light.conf" "$light_theme_path"
    fi
    if [[ -n "$(command -v kitty 2>/dev/null)" ]]; then
        for pid in $(pgrep kitty); do
            kill -SIGUSR1 $pid
        done
    fi
}

setcolor-wezterm() {
    # $1: name of the colorscheme
    local themes_path="$CONFIG_HOME/wezterm/colors"
    local dark_theme_path="$themes_path/dark.toml"
    local light_theme_path="$themes_path/light.toml"
    # If $1 is empty, only need to ensure symlink to color theme files exists
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_path/$DEFAULT_COLOR-dark.toml" "$dark_theme_path"
        ensure-slink "$themes_path/$DEFAULT_COLOR-light.toml" "$light_theme_path"
    else
        force-slink "$themes_path/$1-dark.toml" "$dark_theme_path"
        force-slink "$themes_path/$1-light.toml" "$light_theme_path"
    fi
    local config="$CONFIG_HOME/wezterm/wezterm.lua"
    [[ -e "$config" ]] && touch "$config" # Reload config
}

setcolor-highlight() {
    # $1: name of the colorscheme
    local themes_path="$HOME/.highlight/themes"
    local dark_theme_path="$themes_path/dark.theme"
    local light_theme_path="$themes_path/light.theme"
    # If $1 is empty, only need to ensure symlink to color theme files exists
    if [[ -z "$1" ]]; then
        ensure-slink \
            "$themes_path/$DEFAULT_COLOR-dark.theme" "$dark_theme_path"
        ensure-slink \
            "$themes_path/$DEFAULT_COLOR-light.theme" "$light_theme_path"
    else
        force-slink "$themes_path/$1-dark.theme" "$dark_theme_path"
        force-slink "$themes_path/$1-light.theme" "$light_theme_path"
    fi
}

setcolor-nvim() {
    # $1: name of the colorscheme
    if [[ -z "$1" || -z "$(command -v nvim 2>/dev/null)" ]]; then
        return 1
    fi
    # Spawn an nvim instance to write the background to shada file
    nvim --headless --noplugin +"let g:COLORSNAME='$1'" +wshada +quit
    # List of pids to exclude from sending signal
    local excludes
    IFS=, read -r -a excludes <<<"$2"
    # Send signal to running nvim instances to change their background
    for pid in "$(pgrep nvim)"; do
        if [[ ! " ${excludes[*]} " =~ " ${pid} " ]]; then
            kill -USR1 $pid &>/dev/null
        fi
    done
}

get-new-profile-name() {
    # $1: path to config file
    # $2: name of the colorscheme
    local current_profile=$(kreadconfig5 --file "$1" \
        --group 'Desktop Entry' --key 'DefaultProfile')
    local current_profile_name=${current_profile%\.profile}
    local new_profile_name=$(get-cap-theme-name "$2")
    new_profile_name=$(echo "$current_profile_name" |
        sed "s/^\(.*\)\(Light\|Dark\|light\|dark\)/${new_profile_name} \2/")
    # If new profile name is empty, use default profile 'Nano Dark'
    [[ -z "$new_profile_name" ]] && new_profile_name='Nano Dark'
    echo "$new_profile_name"
}

konsole-switch-profile-colorscheme() {
    # $1: name of the app
    # $2: colorscheme name
    if [[ -z "$(command -v kreadconfig5 2>/dev/null)" ||
    -z "$(command -v kwriteconfig5 2>/dev/null)" ]]; then
        return 1
    fi
    local rc="$CONFIG_HOME/${1}rc"
    local new_profile_name=$(get-new-profile-name "$rc" "$2")
    if [[ -e "$DATA_HOME/konsole/$new_profile_name.profile" ]]; then
        kwriteconfig5 --file "$rc" \
            --group 'Desktop Entry' \
            --key DefaultProfile "$new_profile_name.profile"
        qdbus-call-service-method "$1" setProfile "$new_profile_name"
    fi
}

setcolor-konsole-yakuake() {
    # $1: name of the colorscheme
    if [[ -z "$1" ]]; then
        return 1
    fi
    konsole-switch-profile-colorscheme konsole "$1"
    konsole-switch-profile-colorscheme yakuake "$1"
    konsole-switch-profile-colorscheme dolphin "$1"
    konsole-switch-profile-colorscheme kate "$1"
}

setcolor-fish() {
    # $1: name of the colorscheme
    local themes_path="$CONFIG_HOME/fish/themes"
    local dark_theme_path="$themes_path/Dark.theme"
    local light_theme_path="$themes_path/Light.theme"
    local default_theme_name=$(get-cap-theme-name "$DEFAULT_COLOR")
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_path/${default_theme_name} Dark.theme" \
            "$dark_theme_path"
        ensure-slink "$themes_path/${default_theme_name} Light.theme" \
            "$light_theme_path"
    else
        local theme_name=$(get-cap-theme-name "$1")
        force-slink "$themes_path/${theme_name} Dark.theme" "$dark_theme_path"
        force-slink "$themes_path/${theme_name} Light.theme" "$light_theme_path"
    fi
    [[ -n "$(command -v fish 2>/dev/null)" ]] &&
        fish -c 'set -U __fish_reload_theme "$(head -c 16 /dev/urandom | base32)"'
}

setcolor-plasma() {
    # $1: name of the colorscheme
    if [[ -z "$1" ]]; then
        return 1
    fi
    # gruvbox-material -> GruvboxMaterial
    local new_theme_name=$(get-cap-theme-name "$1" | sed 's/ //g')
    if [[ -n "$(command -v plasma-apply-desktoptheme 2>/dev/null)" ]]; then
        local current_theme=$(plasma-get-current-desktoptheme)
        local bg=$(echo "$current_theme" | grep -o 'Light\|Dark')
        local new_theme="$new_theme_name${bg:-Dark}"
        if [[ "$current_theme" != "$new_theme" ]]; then
            plasma-apply-desktoptheme "$new_theme" &>/dev/null
        fi
    fi
    if [[ -n "$(command -v plasma-apply-colorscheme 2>/dev/null)" ]]; then
        local current_scheme=$(plasma-get-current-colorscheme)
        local bg=$(echo "$current_scheme" | grep -o 'Light\|Dark')
        local new_scheme="$new_theme_name${bg:-Dark}"
        echo "$new_theme"
        if [[ "$current_scheme" != "$new_scheme" ]]; then
            plasma-apply-colorscheme "$new_scheme" &>/dev/null
        fi
    fi
}

usage() {
    echo 'Usage: setcolor [<colorscheme>] [--exclude-nvim-processes=<pid1>,<pid2>,...]'
    exit 1
}

main() {
    local color=''
    local exclude_nvim_processes=''
    for arg in "$@"; do
        case "$arg" in
        -h | --help)
            usage
            ;;
        --exclude-nvim-processes=*)
            exclude_nvim_processes="${arg#*=}"
            shift
            ;;
        *)
            color="$arg"
            shift
            ;;
        esac
    done
    setcolor-alacritty "$color"
    setcolor-kitty "$color"
    setcolor-wezterm "$color"
    setcolor-konsole-yakuake "$color"
    setcolor-highlight "$color"
    setcolor-nvim "$color" "$exclude_nvim_processes"
    setcolor-fish "$color"
    setcolor-plasma "$color"
    return 0
}

main "$@"
