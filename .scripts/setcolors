#!/usr/bin/env bash
# vim: ft=sh ts=4 sw=4 sts=4 et :

CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
DEFAULT_COLOR='dragon'
DEFAULT_BG='dark'

has() {
    command -v "$1" >/dev/null 2>&1
}

# Convert a color name to capital style
# gruvbox-material -> Gruvbox Material
get-cap-theme-name() {
    # $1: name of the fish theme
    if ! has awk || ! has sed; then
        return 1
    fi
    local theme_name=$(echo "$1" |
        sed 's/-/ /g' |
        awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1')
    echo "$theme_name"
}

setcolor-alacritty() {
    # $1: name of the colorscheme
    local themes_path="$CONFIG_HOME/alacritty/themes"
    local dark_theme_path="$themes_path/dark.yml"
    local light_theme_path="$themes_path/light.yml"
    # If $1 is empty, only need to ensure symlink to color theme files exists
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_path/$DEFAULT_COLOR-dark.yml" "$dark_theme_path"
        ensure-slink "$themes_path/$DEFAULT_COLOR-light.yml" "$light_theme_path"
    else
        force-slink "$themes_path/$1-dark.yml" "$dark_theme_path"
        force-slink "$themes_path/$1-light.yml" "$light_theme_path"
    fi
    local config="$CONFIG_HOME/alacritty/alacritty.yml"
    [[ -e "$config" ]] && touch "$config" # Reload config
}

setcolor-kitty() {
    # $1: name of the colorscheme
    local themes_path="$CONFIG_HOME/kitty/themes"
    local dark_theme_path="$themes_path/dark.conf"
    local light_theme_path="$themes_path/light.conf"
    # If $1 is empty, only need to ensure symlink to color theme files exists
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_path/$DEFAULT_COLOR-dark.conf" "$dark_theme_path"
        ensure-slink "$themes_path/$DEFAULT_COLOR-light.conf" "$light_theme_path"
    else
        force-slink "$themes_path/$1-dark.conf" "$dark_theme_path"
        force-slink "$themes_path/$1-light.conf" "$light_theme_path"
    fi
    if has kitty; then
        for pid in $(pgrep kitty); do
            kill -SIGUSR1 $pid
        done
    fi
}

setcolor-wezterm() {
    # $1: name of the colorscheme
    local themes_path="$CONFIG_HOME/wezterm/colors"
    local dark_theme_path="$themes_path/dark.toml"
    local light_theme_path="$themes_path/light.toml"
    # If $1 is empty, only need to ensure symlink to color theme files exists
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_path/$DEFAULT_COLOR-dark.toml" "$dark_theme_path"
        ensure-slink "$themes_path/$DEFAULT_COLOR-light.toml" "$light_theme_path"
    else
        force-slink "$themes_path/$1-dark.toml" "$dark_theme_path"
        force-slink "$themes_path/$1-light.toml" "$light_theme_path"
    fi
    local config="$CONFIG_HOME/wezterm/wezterm.lua"
    [[ -e "$config" ]] && touch "$config" # Reload config
}

setcolor-highlight() {
    # $1: name of the colorscheme
    local themes_path="$HOME/.highlight/themes"
    local dark_theme_path="$themes_path/dark.theme"
    local light_theme_path="$themes_path/light.theme"
    # If $1 is empty, only need to ensure symlink to color theme files exists
    if [[ -z "$1" ]]; then
        ensure-slink \
            "$themes_path/$DEFAULT_COLOR-dark.theme" "$dark_theme_path"
        ensure-slink \
            "$themes_path/$DEFAULT_COLOR-light.theme" "$light_theme_path"
    else
        force-slink "$themes_path/$1-dark.theme" "$dark_theme_path"
        force-slink "$themes_path/$1-light.theme" "$light_theme_path"
    fi
}

setcolor-nvim() {
    # $1: name of the colorscheme
    if [[ -z "$1" ]] || ! has nvim; then
        return 1
    fi
    local runtime_dir="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"
    local appname="${NVIM_APPNAME:-nvim}"
    for sock in "$runtime_dir"/"$appname".*.0; do
        nvim --clean --headless --server "$sock" \
            --remote-send "<Cmd>if get(g:, 'colors_name', '') !=# '$1' | \
                let g:script_set_colors=1 | silent! colors $1 | \
                unlet g:script_set_colors | endif<CR>" 2>/dev/null
    done
    if has jq; then
        local colors_json="$STATE_HOME/nvim/colors.json"
        if [[ ! -e "$colors_json" ]]; then
            touch "$colors_json"
        fi
        local colors_name=$(jq -r '.colors_name' "$colors_json")
        if [[ "$colors_name" != "$1" ]]; then
            jq --arg colors_name "$1" '.colors_name = $colors_name' \
                "$colors_json" >"$colors_json.tmp"
            mv "$colors_json.tmp" "$colors_json"
        fi
    fi
}

get-new-profile-name() {
    # $1: path to config file
    # $2: name of the colorscheme
    local current_profile=$(kreadconfig5 --file "$1" \
        --group 'Desktop Entry' --key 'DefaultProfile')
    local current_profile_name=${current_profile%\.profile}
    local new_profile_name=$(get-cap-theme-name "$2")
    new_profile_name=$(echo "$current_profile_name" |
        sed "s/^\(.*\)\(Light\|Dark\|light\|dark\)/${new_profile_name} \2/")
    # If new profile name is empty, use default profile
    [[ -z "$new_profile_name" ]] &&
        new_profile_name="${DEFAULT_COLOR^} ${DEFAULT_BG^}"
    echo "$new_profile_name"
}

konsole-switch-profile-colorscheme() {
    # $1: name of the app
    # $2: colorscheme name
    if ! has kreadconfig5 || ! has kwriteconfig5; then
        return 1
    fi
    local rc="$CONFIG_HOME/${1}rc"
    local new_profile_name=$(get-new-profile-name "$rc" "$2")
    if [[ -e "$DATA_HOME/konsole/$new_profile_name.profile" ]]; then
        kwriteconfig5 --file "$rc" \
            --group 'Desktop Entry' \
            --key DefaultProfile "$new_profile_name.profile"
        qdbus-call-service-method "$1" setProfile "$new_profile_name"
    fi
}

setcolor-konsole-yakuake() {
    # $1: name of the colorscheme
    if [[ -z "$1" ]]; then
        return 1
    fi
    konsole-switch-profile-colorscheme konsole "$1"
    konsole-switch-profile-colorscheme yakuake "$1"
    konsole-switch-profile-colorscheme dolphin "$1"
    konsole-switch-profile-colorscheme kate "$1"
}

setcolor-fish() {
    # $1: name of the colorscheme
    local themes_path="$CONFIG_HOME/fish/themes"
    local dark_theme_path="$themes_path/Dark.theme"
    local light_theme_path="$themes_path/Light.theme"
    local default_theme_name=$(get-cap-theme-name "$DEFAULT_COLOR")
    if [[ -z "$1" ]]; then
        ensure-slink "$themes_path/${default_theme_name} Dark.theme" \
            "$dark_theme_path"
        ensure-slink "$themes_path/${default_theme_name} Light.theme" \
            "$light_theme_path"
    else
        local theme_name=$(get-cap-theme-name "$1")
        force-slink "$themes_path/${theme_name} Dark.theme" "$dark_theme_path"
        force-slink "$themes_path/${theme_name} Light.theme" "$light_theme_path"
    fi
    has fish &&
        fish -c 'set -U __fish_reload_theme "$(head -c 16 /dev/urandom | base32)"'
}

setcolor-plasma() {
    # $1: name of the colorscheme
    if [[ -z "$1" ]]; then
        return 1
    fi
    # gruvbox-material -> GruvboxMaterial
    local new_theme_name=$(get-cap-theme-name "$1" | sed 's/ //g')
    if has plasma-apply-desktoptheme; then
        local current_theme=$(plasma-get-current-desktoptheme)
        local bg=$(echo "$current_theme" | grep -o 'Light\|Dark')
        local new_theme="$new_theme_name${bg:-$DEFAULT_BG}"
        if [[ "$current_theme" != "$new_theme" ]]; then
            plasma-apply-desktoptheme "$new_theme" &>/dev/null
        fi
    fi
    if has plasma-apply-colorscheme; then
        local current_scheme=$(plasma-get-current-colorscheme)
        local bg=$(echo "$current_scheme" | grep -o 'Light\|Dark')
        local new_scheme="$new_theme_name${bg:-$DEFAULT_BG}"
        if [[ "$current_scheme" != "$new_scheme" ]]; then
            plasma-apply-colorscheme "$new_scheme" &>/dev/null
        fi
    fi
}

usage() {
    echo 'Usage: setcolor [<colorscheme>]'
    exit 1
}

main() {
    local color=''
    for arg in "$@"; do
        case "$arg" in
        -h | --help)
            usage
            ;;
        *)
            color="$arg"
            shift
            ;;
        esac
    done
    setcolor-alacritty "$color" &
    setcolor-kitty "$color" &
    setcolor-wezterm "$color" &
    setcolor-konsole-yakuake "$color" &
    setcolor-highlight "$color" &
    setcolor-nvim "$color" &
    setcolor-fish "$color" &
    setcolor-plasma "$color" &
    return 0
}

main "$@"
